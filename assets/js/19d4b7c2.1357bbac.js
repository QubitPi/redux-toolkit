"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["1603"],{1311:function(e,t,n){n.r(t),n.d(t,{default:()=>g,frontMatter:()=>l,metadata:()=>a,assets:()=>d,toc:()=>c,contentTitle:()=>u});var a=JSON.parse('{"id":"rtk-query/usage/pagination","title":"Pagination","description":"RTK Query > Usage > Pagination: suggestions for handling paginated data","source":"@site/../docs/rtk-query/usage/pagination.mdx","sourceDirName":"rtk-query/usage","slug":"/rtk-query/usage/pagination","permalink":"/rtk-query/usage/pagination","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1747273418000,"frontMatter":{"id":"pagination","title":"Pagination","sidebar_label":"Pagination","hide_title":true,"description":"RTK Query > Usage > Pagination: suggestions for handling paginated data"},"sidebar":"docs","previous":{"title":"Error Handling","permalink":"/rtk-query/usage/error-handling"},"next":{"title":"Prefetching","permalink":"/rtk-query/usage/prefetching"}}'),i=n("4246"),r=n("980"),s=n("8049"),o=n("5181");let l={id:"pagination",title:"Pagination",sidebar_label:"Pagination",hide_title:!0,description:"RTK Query > Usage > Pagination: suggestions for handling paginated data"},u="Pagination",d={},c=[{value:"Pagination Recipes",id:"pagination-recipes",level:2},{value:"Setup an endpoint to accept a page <code>arg</code>",id:"setup-an-endpoint-to-accept-a-page-arg",level:3},{value:"Trigger the next page by incrementing the <code>page</code> state variable",id:"trigger-the-next-page-by-incrementing-the-page-state-variable",level:3},{value:"Automated Re-fetching of Paginated Queries",id:"automated-re-fetching-of-paginated-queries",level:3},{value:"General Pagination Example",id:"general-pagination-example",level:2}];function p(e){let t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"\xa0"}),"\n",(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"pagination",children:"Pagination"})}),"\n",(0,i.jsx)(t.p,{children:"RTK Query does not include any built-in pagination behavior. However, RTK Query does make it straightforward to integrate with a standard index-based pagination API. This is the most common form of pagination that you'll need to implement."}),"\n",(0,i.jsx)(t.h2,{id:"pagination-recipes",children:"Pagination Recipes"}),"\n",(0,i.jsxs)(t.h3,{id:"setup-an-endpoint-to-accept-a-page-arg",children:["Setup an endpoint to accept a page ",(0,i.jsx)(t.code,{children:"arg"})]}),"\n",(0,i.jsxs)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],children:[(0,i.jsx)(s.Z,{value:"ts",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/services/posts.ts"',children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\ninterface Post {\n  id: number\n  name: string\n}\ninterface ListResponse<T> {\n  page: number\n  per_page: number\n  total: number\n  total_pages: number\n  data: T[]\n}\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    listPosts: build.query<ListResponse<Post>, number | void>({\n      query: (page = 1) => `posts?page=${page}`,\n    }),\n  }),\n})\n\nexport const { useListPostsQuery } = api\n"})})}),(0,i.jsx)(s.Z,{value:"js",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="src/app/services/posts.js"',children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    listPosts: build.query({\n      query: (page = 1) => `posts?page=${page}`,\n    }),\n  }),\n})\n\nexport const { useListPostsQuery } = api\n"})})})]}),"\n",(0,i.jsxs)(t.h3,{id:"trigger-the-next-page-by-incrementing-the-page-state-variable",children:["Trigger the next page by incrementing the ",(0,i.jsx)(t.code,{children:"page"})," state variable"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:'no-transpile title="src/features/posts/PostsManager.tsx"',children:"const PostList = () => {\n  const [page, setPage] = useState(1)\n  const { data: posts, isLoading, isFetching } = useListPostsQuery(page)\n\n  if (isLoading) {\n    return <div>Loading</div>\n  }\n\n  if (!posts?.data) {\n    return <div>No posts :(</div>\n  }\n\n  return (\n    <div>\n      {posts.data.map(({ id, title, status }) => (\n        <div key={id}>\n          {title} - {status}\n        </div>\n      ))}\n      <button onClick={() => setPage(page - 1)} isLoading={isFetching}>\n        Previous\n      </button>\n      <button onClick={() => setPage(page + 1)} isLoading={isFetching}>\n        Next\n      </button>\n    </div>\n  )\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"automated-re-fetching-of-paginated-queries",children:"Automated Re-fetching of Paginated Queries"}),"\n",(0,i.jsxs)(t.p,{children:["It is a common use-case to utilize tag invalidation to perform\n",(0,i.jsx)(t.a,{href:"/rtk-query/usage/automated-refetching",children:"automated re-fetching"})," with RTK Query."]}),"\n",(0,i.jsxs)(t.p,{children:["A potential pitfall when combining this with pagination is that your paginated query may only\nprovide a ",(0,i.jsx)(t.em,{children:"partial"})," list at any given time, and hence not ",(0,i.jsx)(t.code,{children:"provide"})," tags for entity IDs that\nfall on pages which aren't currently shown. If a specific entity is deleted that falls on an\nearlier page, the paginated query will not be providing a tag for that specific ID, and will\nnot be invalidated to trigger re-fetching data. As a result, items on the current page that\nshould shift one item up will not have done so, and the total count of items and/or pages\nmay be incorrect."]}),"\n",(0,i.jsxs)(t.p,{children:["A strategy to overcome this is to ensure that the ",(0,i.jsx)(t.code,{children:"delete"})," mutation always ",(0,i.jsx)(t.code,{children:"invalidates"})," the\npaginated query, even if the deleted item is not ",(0,i.jsx)(t.em,{children:"currently"})," provided on that page. We can\nleverage the concept of\n",(0,i.jsx)(t.a,{href:"/rtk-query/usage/automated-refetching#advanced-invalidation-with-abstract-tag-ids",children:"advanced invalidation with abstract tag ids"}),"\nto do this by ",(0,i.jsx)(t.code,{children:"providing"})," a ",(0,i.jsx)(t.code,{children:"'Posts'"})," tag with the ",(0,i.jsx)(t.code,{children:"'PARTIAL-LIST'"})," ID in our paginated query,\nand ",(0,i.jsx)(t.code,{children:"invalidating"})," that corresponding tag for any mutation that should affect it."]}),"\n",(0,i.jsxs)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],children:[(0,i.jsx)(s.Z,{value:"ts",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Example of invalidating cache for paginated queries"',children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\ninterface Post {\n  id: number\n  name: string\n}\ninterface ListResponse<T> {\n  page: number\n  per_page: number\n  total: number\n  total_pages: number\n  data: T[]\n}\n\nexport const postApi = createApi({\n  reducerPath: 'postsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    listPosts: build.query<ListResponse<Post>, number | void>({\n      query: (page = 1) => `posts?page=${page}`,\n      // highlight-start\n      providesTags: (result, error, page) =>\n        result\n          ? [\n              // Provides a tag for each post in the current page,\n              // as well as the 'PARTIAL-LIST' tag.\n              ...result.data.map(({ id }) => ({ type: 'Posts' as const, id })),\n              { type: 'Posts', id: 'PARTIAL-LIST' },\n            ]\n          : [{ type: 'Posts', id: 'PARTIAL-LIST' }],\n      // highlight-end\n    }),\n    deletePost: build.mutation<{ success: boolean; id: number }, number>({\n      query(id) {\n        return {\n          url: `post/${id}`,\n          method: 'DELETE',\n        }\n      },\n      // Invalidates the tag for this Post `id`, as well as the `PARTIAL-LIST` tag,\n      // causing the `listPosts` query to re-fetch if a component is subscribed to the query.\n      // highlight-start\n      invalidatesTags: (result, error, id) => [\n        { type: 'Posts', id },\n        { type: 'Posts', id: 'PARTIAL-LIST' },\n      ],\n      // highlight-end\n    }),\n  }),\n})\n"})})}),(0,i.jsx)(s.Z,{value:"js",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Example of invalidating cache for paginated queries"',children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const postApi = createApi({\n  reducerPath: 'postsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    listPosts: build.query({\n      query: (page = 1) => `posts?page=${page}`,\n      // highlight-start\n      providesTags: (result, error, page) =>\n        result\n          ? [\n              // Provides a tag for each post in the current page,\n              // as well as the 'PARTIAL-LIST' tag.\n              ...result.data.map(({ id }) => ({ type: 'Posts', id })),\n              { type: 'Posts', id: 'PARTIAL-LIST' },\n            ]\n          : [{ type: 'Posts', id: 'PARTIAL-LIST' }],\n      // highlight-end\n    }),\n    deletePost: build.mutation({\n      query(id) {\n        return {\n          url: `post/${id}`,\n          method: 'DELETE',\n        }\n      },\n      // Invalidates the tag for this Post `id`, as well as the `PARTIAL-LIST` tag,\n      // causing the `listPosts` query to re-fetch if a component is subscribed to the query.\n      // highlight-start\n      invalidatesTags: (result, error, id) => [\n        { type: 'Posts', id },\n        { type: 'Posts', id: 'PARTIAL-LIST' },\n      ],\n      // highlight-end\n    }),\n  }),\n})\n"})})})]}),"\n",(0,i.jsx)(t.h2,{id:"general-pagination-example",children:"General Pagination Example"}),"\n",(0,i.jsxs)(t.p,{children:["In the following example, you'll see ",(0,i.jsx)(t.code,{children:"Loading"})," on the initial query, but then as you move forward we'll use the next/previous buttons as a ",(0,i.jsx)(t.em,{children:"fetching"})," indicator while any non-cached query is performed. When you go back, the cached data will be served instantaneously."]}),"\n",(0,i.jsx)("iframe",{src:"https://codesandbox.io/embed/github/reduxjs/redux-toolkit/tree/master/examples/query/react/pagination?fontsize=12&runonclick=1&hidenavigation=1&theme=dark",style:{width:"100%",height:"600px",border:0,borderRadius:"4px",overflow:"hidden"},title:"RTK Query Pagination Example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"})]})}function g(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8049:function(e,t,n){n.d(t,{Z:()=>r});var a=n("4246");n("7378");var i=n("4870");function r(e){let{children:t,hidden:n,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.Z)("tabItem_wHwb",r),hidden:n,children:t})}},5181:function(e,t,n){n.d(t,{Z:()=>b});var a=n("4246"),i=n("7378"),r=n("4870"),s=n("5403"),o=n("3620"),l=n("7090"),u=n("6180"),d=n("3418"),c=n("9073");function p(e){var t,n;return null!==(n=null===(t=i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function g(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var h=n("3344");function m(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:l}=e,u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),c=e=>{let t=e.currentTarget,n=l[u.indexOf(t)].value;n!==i&&(d(t),o(n))},p=e=>{var t,n;let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{let n=u.indexOf(e.currentTarget)+1;a=null!==(t=u[n])&&void 0!==t?t:u[0];break}case"ArrowLeft":{let t=u.indexOf(e.currentTarget)-1;a=null!==(n=u[t])&&void 0!==n?n:u[u.length-1]}}null==a||a.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:l.map(e=>{let{value:t,label:n,attributes:s}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>u.push(e),onKeyDown:p,onClick:c,...s,className:(0,r.Z)("tabs__item","tabItem_l0OV",null==s?void 0:s.className,{"tabs__item--active":i===t}),children:null!=n?n:t},t)})})}function f(e){let{lazy:t,children:n,selectedValue:s}=e,o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=o.find(e=>e.props.value===s);return e?(0,i.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:o.map((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==s}))})}function v(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:a}=e,r=function(e){let{values:t,children:n}=e;return(0,i.useMemo)(()=>{let e=null!=t?t:p(n).map(e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}});return!function(e){let t=(0,d.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(t.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[t,n])}(e),[s,h]=(0,i.useState)(()=>(function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:a}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(n,'" but none of its children has the corresponding value. Available values are: ').concat(a.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return n}let i=null!==(t=a.find(e=>e.default))&&void 0!==t?t:a[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:t,tabValues:r})),[m,f]=function(e){let{queryString:t=!1,groupId:n}=e,a=(0,o.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,u._X)(r),(0,i.useCallback)(e=>{if(!r)return;let t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})},[r,a])]}({queryString:n,groupId:a}),[v,b]=function(e){let{groupId:t}=e,n=t?"docusaurus.tab.".concat(t):null,[a,r]=(0,c.Nk)(n);return[a,(0,i.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:a}),y=(()=>{let e=null!=m?m:v;return g({value:e,tabValues:r})?e:null})();return(0,l.Z)(()=>{y&&h(y)},[y]),{selectedValue:s,selectValue:(0,i.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw Error("Can't select invalid tab value=".concat(e));h(e),f(e),b(e)},[f,b,r]),tabValues:r}}(e);return(0,a.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList_J5MA"),children:[(0,a.jsx)(m,{...t,...e}),(0,a.jsx)(f,{...t,...e})]})}function b(e){let t=(0,h.Z)();return(0,a.jsx)(v,{...e,children:p(e.children)},String(t))}},980:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return s}});var a=n(7378);let i={},r=a.createContext(i);function s(e){let t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);