"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5334],{3411:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(7378),i=a(7140),r="tabItem_wHwb";function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:a},t)}},2453:function(e,t,a){a.d(t,{Z:function(){return h}});var n=a(2685),i=a(7378),r=a(7140),o=a(362),u=a(56),l=a(5720),s=a(9169),p="tabList_J5MA",d="tabItem_l0OV";function c(e){var t,a,o=e.lazy,c=e.block,h=e.defaultValue,m=e.values,y=e.groupId,f=e.className,g=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,u.l)(k,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===h?h:null!=(t=null!=h?h:null==(a=g.find((function(e){return e.props.default})))?void 0:a.props.value)?t:g[0].props.value;if(null!==b&&!k.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,l.U)(),N=w.tabGroupChoices,P=w.setTabGroupChoices,C=(0,i.useState)(b),T=C[0],x=C[1],q=[],O=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var j=N[y];null!=j&&j!==T&&k.some((function(e){return e.value===j}))&&x(j)}var Q=function(e){var t=e.currentTarget,a=q.indexOf(t),n=k[a].value;n!==T&&(O(t),x(n),null!=y&&P(y,String(n)))},A=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,i=q.indexOf(e.currentTarget)+1;a=null!=(n=q[i])?n:q[0];break;case"ArrowLeft":var r,o=q.indexOf(e.currentTarget)-1;a=null!=(r=q[o])?r:q[q.length-1]}null==(t=a)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},f)},k.map((function(e){var t=e.value,a=e.label,o=e.attributes;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return q.push(e)},onKeyDown:A,onFocus:Q,onClick:Q},o,{className:(0,r.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),o?(0,i.cloneElement)(g.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},g.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function h(e){var t=(0,o.Z)();return i.createElement(c,(0,n.Z)({key:String(t)},e))}},5091:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return h}});var n=a(2685),i=a(1244),r=(a(7378),a(5318)),o=a(3411),u=a(2453),l=["components"],s={id:"manual-cache-updates",title:"Manual Cache Updates",sidebar_label:"Manual Cache Updates",hide_title:!0,description:"RTK Query > Usage > Manual Cache Updates: Updating cached data manually"},p=void 0,d={unversionedId:"rtk-query/usage/manual-cache-updates",id:"rtk-query/usage/manual-cache-updates",title:"Manual Cache Updates",description:"RTK Query > Usage > Manual Cache Updates: Updating cached data manually",source:"@site/../docs/rtk-query/usage/manual-cache-updates.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/manual-cache-updates",permalink:"/redux-toolkit/rtk-query/usage/manual-cache-updates",draft:!1,tags:[],version:"current",lastUpdatedAt:1681260993,formattedLastUpdatedAt:"Apr 12, 2023",frontMatter:{id:"manual-cache-updates",title:"Manual Cache Updates",sidebar_label:"Manual Cache Updates",hide_title:!0,description:"RTK Query > Usage > Manual Cache Updates: Updating cached data manually"},sidebar:"docs",previous:{title:"Automated Re-fetching",permalink:"/redux-toolkit/rtk-query/usage/automated-refetching"},next:{title:"Conditional Fetching",permalink:"/redux-toolkit/rtk-query/usage/conditional-fetching"}},c={},h=[{value:"Overview",id:"overview",level:2},{value:"Recipes",id:"recipes",level:2},{value:"Optimistic Updates",id:"optimistic-updates",level:3},{value:"Example",id:"example",level:4},{value:"Pessimistic Updates",id:"pessimistic-updates",level:3},{value:"General Updates",id:"general-updates",level:3}],m={toc:h};function y(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"manual-cache-updates"},"Manual Cache Updates"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"For most cases, in order to receive up to date data after a triggering a change in the backend,\nyou can take advantage of ",(0,r.kt)("inlineCode",{parentName:"p"},"cache tag invalidation")," to perform\n",(0,r.kt)("a",{parentName:"p",href:"./automated-refetching"},"automated re-fetching"),", which will cause a query to re-fetch its data\nwhen it has been told that a mutation has occurred which would cause its data to become out of date.\nIn most cases, we recommend using ",(0,r.kt)("inlineCode",{parentName:"p"},"automated re-fetching")," as a preference over ",(0,r.kt)("inlineCode",{parentName:"p"},"manual cache updates"),",\nunless you encounter the need to do so."),(0,r.kt)("p",null,"However, in some cases, you may want to update the cache manually. When you wish to update cache\ndata that ",(0,r.kt)("em",{parentName:"p"},"already exists")," for query endpoints, you can do so using the\n",(0,r.kt)("a",{parentName:"p",href:"/redux-toolkit/rtk-query/api/created-api/api-slice-utils#updatequerydata"},(0,r.kt)("inlineCode",{parentName:"a"},"updateQueryData"))," thunk action\navailable on the ",(0,r.kt)("inlineCode",{parentName:"p"},"util")," object of your created API."),(0,r.kt)("p",null,"Anywhere you have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"dispatch")," method for the store instance, you can dispatch the\nresult of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"updateQueryData")," in order to update the cache data for a query endpoint,\nif the corresponding cache entry exists."),(0,r.kt)("p",null,"Use cases for manual cache updates include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Providing immediate feedback to the user when a mutation is attempted"),(0,r.kt)("li",{parentName:"ul"},"After a mutation, updating a single item in a large list of items that is already cached,\nrather than re-fetching the whole list"),(0,r.kt)("li",{parentName:"ul"},"Debouncing a large number of mutations with immediate feedback as though they are being\napplied, followed by a single request sent to the server to update the debounced attempts")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"updateQueryData")," is strictly intended to perform ",(0,r.kt)("em",{parentName:"p"},"updates")," to existing cache entries,\nnot create new entries. If an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateQueryData")," thunk action is dispatched that corresponds to\nno existing cache entry for the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"endpointName")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," combination, the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"recipe"),"\nwill not be called, and no ",(0,r.kt)("inlineCode",{parentName:"p"},"patches")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"inversePatches")," will be returned.")),(0,r.kt)("h2",{id:"recipes"},"Recipes"),(0,r.kt)("h3",{id:"optimistic-updates"},"Optimistic Updates"),(0,r.kt)("p",null,"When you wish to perform an update to cache data immediately after a ",(0,r.kt)("a",{parentName:"p",href:"./mutations"},(0,r.kt)("inlineCode",{parentName:"a"},"mutation"))," is\ntriggered, you can apply an ",(0,r.kt)("inlineCode",{parentName:"p"},"optimistic update"),". This can be a useful pattern for when you want to\ngive the user the impression that their changes are immediate, even while the mutation request is\nstill in flight."),(0,r.kt)("p",null,"The core concepts for an optimistic update are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"when you start a query or mutation, ",(0,r.kt)("inlineCode",{parentName:"li"},"onQueryStarted")," will be executed"),(0,r.kt)("li",{parentName:"ul"},"you manually update the cached data by dispatching ",(0,r.kt)("inlineCode",{parentName:"li"},"api.util.updateQueryData")," within ",(0,r.kt)("inlineCode",{parentName:"li"},"onQueryStarted")),(0,r.kt)("li",{parentName:"ul"},"then, in the case that ",(0,r.kt)("inlineCode",{parentName:"li"},"queryFulfilled")," rejects:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"you roll it back via the ",(0,r.kt)("inlineCode",{parentName:"li"},".undo")," property of the object you got back from the earlier dispatch,",(0,r.kt)("br",{parentName:"li"}),"OR"),(0,r.kt)("li",{parentName:"ul"},"you invalidate the cache data via ",(0,r.kt)("inlineCode",{parentName:"li"},"api.util.invalidateTags")," to trigger a full re-fetch of the data")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Where many mutations are potentially triggered in short succession causing overlapping requests,\nyou may encounter race conditions if attempting to roll back patches using the ",(0,r.kt)("inlineCode",{parentName:"p"},".undo")," property\non failures. For these scenarios, it is often simplest and safest to invalidate the tags on error\ninstead, and re-fetch truly up-to-date data from the server.")),(0,r.kt)(u.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Optimistic update mutation example (async await)"',title:'"Optimistic',update:!0,mutation:!0,example:!0,"(async":!0,'await)"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    getPost: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n      providesTags: ['Post'],\n    }),\n    updatePost: build.mutation<void, Pick<Post, 'id'> & Partial<Post>>({\n      query: ({ id, ...patch }) => ({\n        url: `post/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      // highlight-start\n      async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n        const patchResult = dispatch(\n          api.util.updateQueryData('getPost', id, (draft) => {\n            Object.assign(draft, patch)\n          })\n        )\n        try {\n          await queryFulfilled\n        } catch {\n          patchResult.undo()\n\n          /**\n           * Alternatively, on failure you can invalidate the corresponding cache tags\n           * to trigger a re-fetch:\n           * dispatch(api.util.invalidateTags(['Post']))\n           */\n        }\n      },\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Optimistic update mutation example (async await)"',title:'"Optimistic',update:!0,mutation:!0,example:!0,"(async":!0,'await)"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    getPost: build.query({\n      query: (id) => `post/${id}`,\n      providesTags: ['Post'],\n    }),\n    updatePost: build.mutation({\n      query: ({ id, ...patch }) => ({\n        url: `post/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      // highlight-start\n      async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n        const patchResult = dispatch(\n          api.util.updateQueryData('getPost', id, (draft) => {\n            Object.assign(draft, patch)\n          })\n        )\n        try {\n          await queryFulfilled\n        } catch {\n          patchResult.undo()\n\n          /**\n           * Alternatively, on failure you can invalidate the corresponding cache tags\n           * to trigger a re-fetch:\n           * dispatch(api.util.invalidateTags(['Post']))\n           */\n        }\n      },\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"or, if you prefer the slightly shorter version with ",(0,r.kt)("inlineCode",{parentName:"p"},".catch")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"-      async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n+      onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n        const patchResult = dispatch(\n          api.util.updateQueryData('getPost', id, (draft) => {\n            Object.assign(draft, patch)\n          })\n        )\n-       try {\n-         await queryFulfilled\n-       } catch {\n-         patchResult.undo()\n-       }\n+       queryFulfilled.catch(patchResult.undo)\n      }\n")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./examples#react-optimistic-updates"},"React Optimistic Updates")),(0,r.kt)("h3",{id:"pessimistic-updates"},"Pessimistic Updates"),(0,r.kt)("p",null,"When you wish to perform an update to cache data based on the response received from the server\nafter a ",(0,r.kt)("a",{parentName:"p",href:"./mutations"},(0,r.kt)("inlineCode",{parentName:"a"},"mutation"))," is triggered, you can apply a ",(0,r.kt)("inlineCode",{parentName:"p"},"pessimistic update"),".\nThe distinction between a ",(0,r.kt)("inlineCode",{parentName:"p"},"pessimistic update")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"optimistic update")," is that the\n",(0,r.kt)("inlineCode",{parentName:"p"},"pessimistic update")," will instead wait for the response from the server prior to updating\nthe cached data."),(0,r.kt)("p",null,"The core concepts for a pessimistic update are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"when you start a query or mutation, ",(0,r.kt)("inlineCode",{parentName:"li"},"onQueryStarted")," will be executed"),(0,r.kt)("li",{parentName:"ul"},"you await ",(0,r.kt)("inlineCode",{parentName:"li"},"queryFulfilled")," to resolve to an object containing the transformed response from the\nserver in the ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," property"),(0,r.kt)("li",{parentName:"ul"},"you manually update the cached data by dispatching ",(0,r.kt)("inlineCode",{parentName:"li"},"api.util.updateQueryData")," within\n",(0,r.kt)("inlineCode",{parentName:"li"},"onQueryStarted"),", using the data in the response from the server for your draft updates")),(0,r.kt)(u.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Pessimistic update mutation example (async await)"',title:'"Pessimistic',update:!0,mutation:!0,example:!0,"(async":!0,'await)"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    getPost: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n      providesTags: ['Post'],\n    }),\n    updatePost: build.mutation<Post, Pick<Post, 'id'> & Partial<Post>>({\n      query: ({ id, ...patch }) => ({\n        url: `post/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      // highlight-start\n      async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n        try {\n          const { data: updatedPost } = await queryFulfilled\n          const patchResult = dispatch(\n            api.util.updateQueryData('getPost', id, (draft) => {\n              Object.assign(draft, updatedPost)\n            })\n          )\n        } catch {}\n      },\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Pessimistic update mutation example (async await)"',title:'"Pessimistic',update:!0,mutation:!0,example:!0,"(async":!0,'await)"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    getPost: build.query({\n      query: (id) => `post/${id}`,\n      providesTags: ['Post'],\n    }),\n    updatePost: build.mutation({\n      query: ({ id, ...patch }) => ({\n        url: `post/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      // highlight-start\n      async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n        try {\n          const { data: updatedPost } = await queryFulfilled\n          const patchResult = dispatch(\n            api.util.updateQueryData('getPost', id, (draft) => {\n              Object.assign(draft, updatedPost)\n            })\n          )\n        } catch {}\n      },\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,r.kt)("h3",{id:"general-updates"},"General Updates"),(0,r.kt)("p",null,"If you find yourself wanting to update cache data elsewhere in your application, you can do so\nanywhere you have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"store.dispatch")," method, including within React components via\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://react-redux.js.org/api/hooks#usedispatch"},"useDispatch")," hook (or a typed version such\nas ",(0,r.kt)("a",{parentName:"p",href:"https://react-redux.js.org/using-react-redux/usage-with-typescript#define-typed-hooks"},"useAppDispatch"),"\nfor typescript users)."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You should generally avoid manually updating the cache outside of the ",(0,r.kt)("inlineCode",{parentName:"p"},"onQueryStarted"),"\ncallback for a mutation without a good reason, as RTK Query is intended to be used by considering\nyour cached data as a reflection of the server-side state.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="General manual cache update example"',title:'"General',manual:!0,cache:!0,update:!0,'example"':!0},"import { api } from './api'\nimport { useAppDispatch } from './store/hooks'\n\nfunction App() {\n  const dispatch = useAppDispatch()\n\n  function handleClick() {\n    /**\n     * This will update the cache data for the query corresponding to the `getPosts` endpoint,\n     * when that endpoint is used with no argument (undefined).\n     */\n    const patchCollection = dispatch(\n      api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n        draftPosts.push({ id: 1, name: 'Teddy' })\n      })\n    )\n  }\n\n  return <button onClick={handleClick}>Add post to cache</button>\n}\n")))}y.isMDXComponent=!0},5318:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7378);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(a),h=i,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||r;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"}}]);