"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["4133"],{3776:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>o,metadata:()=>a,assets:()=>u,toc:()=>d,contentTitle:()=>l});var a=JSON.parse('{"id":"api/autoBatchEnhancer","title":"autoBatchEnhancer","description":"&nbsp;","source":"@site/../docs/api/autoBatchEnhancer.mdx","sourceDirName":"api","slug":"/api/autoBatchEnhancer","permalink":"/api/autoBatchEnhancer","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1753376260000,"frontMatter":{"id":"autoBatchEnhancer","title":"autoBatchEnhancer","sidebar_label":"autoBatchEnhancer","hide_title":true},"sidebar":"docs","previous":{"title":"getDefaultEnhancers","permalink":"/api/getDefaultEnhancers"},"next":{"title":"createReducer","permalink":"/api/createReducer"}}'),r=t("4246"),i=t("980"),c=t("8049"),s=t("5181");let o={id:"autoBatchEnhancer",title:"autoBatchEnhancer",sidebar_label:"autoBatchEnhancer",hide_title:!0},l="autoBatchEnhancer",u={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"API",id:"api",level:2},{value:"<code>autoBatchEnhancer</code>",id:"autobatchenhancer-1",level:3},{value:"<code>prepareAutoBatched</code>",id:"prepareautobatched",level:3},{value:"Batching Approach and Background",id:"batching-approach-and-background",level:2},{value:"RTK Query and Batching",id:"rtk-query-and-batching",level:3}];function h(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\xa0"}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"autobatchenhancer",children:(0,r.jsx)(n.code,{children:"autoBatchEnhancer"})})}),"\n",(0,r.jsx)(n.p,{children:'A Redux store enhancer that looks for one or more "low-priority" dispatched actions in a row, and queues a callback to run subscriber notifications on a delay. It then notifies subscribers either when the queued callback runs, or when the next "normal-priority" action is dispatched, whichever is first.'}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],children:[(0,r.jsx)(c.Z,{value:"ts",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import {\n  createSlice,\n  configureStore,\n  autoBatchEnhancer,\n  prepareAutoBatched,\n} from '@reduxjs/toolkit'\n\ninterface CounterState {\n  value: number\n}\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 } satisfies CounterState as CounterState,\n  reducers: {\n    incrementBatched: {\n      // Batched, low-priority\n      reducer(state) {\n        state.value += 1\n      },\n      // highlight-start\n      // Use the `prepareAutoBatched` utility to automatically\n      // add the `action.meta[SHOULD_AUTOBATCH]` field the enhancer needs\n      prepare: prepareAutoBatched<void>(),\n      // highlight-end\n    },\n    // Not batched, normal priority\n    decrementUnbatched(state) {\n      state.value -= 1\n    },\n  },\n})\nconst { incrementBatched, decrementUnbatched } = counterSlice.actions\n\n// includes batch enhancer by default, as of RTK 2.0\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n})\n"})})}),(0,r.jsx)(c.Z,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import {\n  createSlice,\n  configureStore,\n  prepareAutoBatched,\n} from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    incrementBatched: {\n      // Batched, low-priority\n      reducer(state) {\n        state.value += 1\n      },\n      // highlight-start\n      // Use the `prepareAutoBatched` utility to automatically\n      // add the `action.meta[SHOULD_AUTOBATCH]` field the enhancer needs\n      prepare: prepareAutoBatched(),\n      // highlight-end\n    },\n    // Not batched, normal priority\n    decrementUnbatched(state) {\n      state.value -= 1\n    },\n  },\n})\nconst { incrementBatched, decrementUnbatched } = counterSlice.actions\n\n// includes batch enhancer by default, as of RTK 2.0\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n})\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.h3,{id:"autobatchenhancer-1",children:(0,r.jsx)(n.code,{children:"autoBatchEnhancer"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="autoBatchEnhancer signature" no-transpile',children:"export type SHOULD_AUTOBATCH = string\ntype AutoBatchOptions =\n  | { type: 'tick' }\n  | { type: 'timer'; timeout: number }\n  | { type: 'raf' }\n  | { type: 'callback'; queueNotification: (notify: () => void) => void }\n\nexport type autoBatchEnhancer = (options?: AutoBatchOptions) => StoreEnhancer\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["As of RTK 2.0, the ",(0,r.jsx)(n.code,{children:"autoBatchEnhancer"})," is included by default when calling ",(0,r.jsx)(n.code,{children:"configureStore"}),"."]}),(0,r.jsxs)(n.p,{children:["This means to configure it, you should instead pass an callback that receives ",(0,r.jsx)(n.code,{children:"getDefaultEnhancers"})," and calls it with your desired settings."]}),(0,r.jsxs)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],children:[(0,r.jsx)(c.Z,{value:"ts",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="Configuring autoBatchEnhancer with getDefaultEnhancers"',children:"import { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({\n  reducer: () => 0,\n  enhancers: (getDefaultEnhancers) =>\n    getDefaultEnhancers({\n      autoBatch: { type: 'tick' },\n    }),\n})\n"})})}),(0,r.jsx)(c.Z,{value:"js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="Configuring autoBatchEnhancer with getDefaultEnhancers"',children:"import { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({\n  reducer: () => 0,\n  enhancers: (getDefaultEnhancers) =>\n    getDefaultEnhancers({\n      autoBatch: { type: 'tick' },\n    }),\n})\n"})})})]})]}),"\n",(0,r.jsx)(n.p,{children:"Creates a new instance of the autobatch store enhancer."}),"\n",(0,r.jsxs)(n.p,{children:["Any action that is tagged with ",(0,r.jsx)(n.code,{children:"action.meta[SHOULD_AUTOBATCH] = true"}),' will be treated as "low-priority", and a notification callback will be queued. The enhancer will delay notifying subscribers until either:']}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The queued callback runs and triggers the notifications"}),"\n",(0,r.jsxs)(n.li,{children:['A "normal-priority" action (any action ',(0,r.jsx)(n.em,{children:"without"})," ",(0,r.jsx)(n.code,{children:"action.meta[SHOULD_AUTOBATCH] = true"}),") is dispatched in the same tick"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"autoBatchEnhancer"})," accepts options to configure how the notification callback is queued:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{type: 'raf'}"}),": queues using ",(0,r.jsx)(n.code,{children:"requestAnimationFrame"})," (default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{type: 'tick'}"}),": queues using ",(0,r.jsx)(n.code,{children:"queueMicrotask"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{type: 'timer', timeout: number}"}),": queues using ",(0,r.jsx)(n.code,{children:"setTimeout"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{type: 'callback', queueNotification: (notify: () => void) => void}"}),": lets you provide your own callback, such as a debounced or throttled function"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The default behavior is to queue the notifications using ",(0,r.jsx)(n.code,{children:"requestAnimationFrame"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SHOULD_AUTOBATCH"})," value is meant to be opaque - it's currently a string for simplicity, but could be a ",(0,r.jsx)(n.code,{children:"Symbol"})," in the future."]}),"\n",(0,r.jsx)(n.h3,{id:"prepareautobatched",children:(0,r.jsx)(n.code,{children:"prepareAutoBatched"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="prepareAutoBatched signature" no-transpile',children:"type prepareAutoBatched = <T>() => (payload: T) => { payload: T; meta: unknown }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Creates a function that accepts a ",(0,r.jsx)(n.code,{children:"payload"})," value, and returns an object with ",(0,r.jsx)(n.code,{children:"{payload, meta: {[SHOULD_AUTOBATCH]: true}}"}),". This is meant to be used with RTK's ",(0,r.jsx)(n.code,{children:"createSlice"}),' and its "',(0,r.jsx)(n.code,{children:"prepare"}),' callback" syntax:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded: {\n      reducer(state, action: PayloadAction<Todo>) {\n        state.push(action.payload)\n      },\n      // highlight-start\n      prepare: prepareAutoBatched<Todo>(),\n      // highlight-end\n    },\n  },\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"batching-approach-and-background",children:"Batching Approach and Background"}),"\n",(0,r.jsxs)(n.p,{children:["The post ",(0,r.jsx)(n.a,{href:"https://blog.isquaredsoftware.com/2020/01/blogged-answers-redux-batching-techniques/",children:"A Comparison of Redux Batching Techniques"}),' describes four different approaches for "batching Redux actions/dispatches"']}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a higher-order reducer that accepts multiple actions nested inside one real action, and iterates over them together"}),"\n",(0,r.jsxs)(n.li,{children:["an enhancer that wraps ",(0,r.jsx)(n.code,{children:"dispatch"})," and debounces the notification callback"]}),"\n",(0,r.jsxs)(n.li,{children:["an enhancer that wraps ",(0,r.jsx)(n.code,{children:"dispatch"})," to accept an array of actions"]}),"\n",(0,r.jsxs)(n.li,{children:["React's ",(0,r.jsx)(n.code,{children:"unstable_batchedUpdates()"}),", which just combines multiple queued renders into one but doesn't affect subscriber notifications"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'This enhancer is a variation of the "debounce" approach, but with a twist.'}),"\n",(0,r.jsxs)(n.p,{children:["Instead of ",(0,r.jsx)(n.em,{children:"just"})," debouncing ",(0,r.jsx)(n.em,{children:"all"})," subscriber notifications, it watches for any actions with a specific ",(0,r.jsx)(n.code,{children:"action.meta[SHOULD_AUTOBATCH]: true"})," field attached."]}),"\n",(0,r.jsxs)(n.p,{children:["When it sees an action with that field, it queues a callback. The reducer is updated immediately, but the enhancer does ",(0,r.jsx)(n.em,{children:"not"})," notify subscribers right way. If other actions with the same field are dispatched in succession, the enhancer will continue to ",(0,r.jsx)(n.em,{children:"not"})," notify subscribers. Then, when the queued callback runs, it finally notifies all subscribers, similar to how React batches re-renders."]}),"\n",(0,r.jsx)(n.p,{children:'The additional twist is also inspired by React\'s separation of updates into "low-priority" and "immediate" behavior (such as a render queued by an AJAX request vs a render queued by a user input that should be handled synchronously).'}),"\n",(0,r.jsxs)(n.p,{children:["If some low-pri actions have been dispatched and a notification microtask is queued, then a ",(0,r.jsx)(n.em,{children:"normal"})," priority action (without the field) is dispatched, the enhancer will go ahead and notify all subscribers synchronously as usual, and ",(0,r.jsx)(n.em,{children:"not"})," notify them at the end of the tick."]}),"\n",(0,r.jsx)(n.p,{children:"This allows Redux users to selectively tag certain actions for effective batching behavior, making this purely opt-in on a per-action basis, while retaining normal notification behavior for all other actions."}),"\n",(0,r.jsx)(n.h3,{id:"rtk-query-and-batching",children:"RTK Query and Batching"}),"\n",(0,r.jsxs)(n.p,{children:["RTK Query already marks several of its key internal action types as batchable. By adding the ",(0,r.jsx)(n.code,{children:"autoBatchEnhancer"})," to the store setup, it improves the overall UI performance, especially when rendering large lists of components that use the RTKQ query hooks."]})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8049:function(e,n,t){t.d(n,{Z:()=>i});var a=t("4246");t("7378");var r=t("4870");function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_wHwb",i),hidden:t,children:n})}},5181:function(e,n,t){t.d(n,{Z:()=>g});var a=t("4246"),r=t("7378"),i=t("4870"),c=t("5403"),s=t("3620"),o=t("7090"),l=t("6180"),u=t("3418"),d=t("9073");function h(e){var n,t;return null!==(t=null===(n=r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===n?void 0:n.filter(Boolean))&&void 0!==t?t:[]}function p(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var f=t("3344");function m(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e,l=[],{blockElementScrollPositionUntilNextRender:u}=(0,c.o5)(),d=e=>{let n=e.currentTarget,t=o[l.indexOf(n)].value;t!==r&&(u(n),s(t))},h=e=>{var n,t;let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let t=l.indexOf(e.currentTarget)+1;a=null!==(n=l[t])&&void 0!==n?n:l[0];break}case"ArrowLeft":{let n=l.indexOf(e.currentTarget)-1;a=null!==(t=l[n])&&void 0!==t?t:l[l.length-1]}}null==a||a.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:o.map(e=>{let{value:n,label:t,attributes:c}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...c,className:(0,i.Z)("tabs__item","tabItem_l0OV",null==c?void 0:c.className,{"tabs__item--active":r===n}),children:null!=t?t:n},n)})})}function b(e){let{lazy:n,children:t,selectedValue:c}=e,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===c);return e?(0,r.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==c}))})}function x(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:a}=e,i=function(e){let{values:n,children:t}=e;return(0,r.useMemo)(()=>{let e=null!=n?n:h(t).map(e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}});return!function(e){let n=(0,u.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(n.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[n,t])}(e),[c,f]=(0,r.useState)(()=>(function(e){var n;let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(a.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let r=null!==(n=a.find(e=>e.default))&&void 0!==n?n:a[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:i})),[m,b]=function(e){let{queryString:n=!1,groupId:t}=e,a=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,r.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})},[i,a])]}({queryString:t,groupId:a}),[x,g]=function(e){let{groupId:n}=e,t=n?"docusaurus.tab.".concat(n):null,[a,i]=(0,d.Nk)(t);return[a,(0,r.useCallback)(e=>{t&&i.set(e)},[t,i])]}({groupId:a}),j=(()=>{let e=null!=m?m:x;return p({value:e,tabValues:i})?e:null})();return(0,o.Z)(()=>{j&&f(j)},[j]),{selectedValue:c,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw Error("Can't select invalid tab value=".concat(e));f(e),b(e),g(e)},[b,g,i]),tabValues:i}}(e);return(0,a.jsxs)("div",{className:(0,i.Z)("tabs-container","tabList_J5MA"),children:[(0,a.jsx)(m,{...n,...e}),(0,a.jsx)(b,{...n,...e})]})}function g(e){let n=(0,f.Z)();return(0,a.jsx)(x,{...e,children:h(e.children)},String(n))}},980:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return c}});var a=t(7378);let r={},i=a.createContext(r);function c(e){let n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);