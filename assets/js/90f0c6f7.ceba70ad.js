"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6844],{3411:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(7378),i=n(7140),r="tabItem_wHwb";function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,s),hidden:n},t)}},2453:function(e,t,n){n.d(t,{Z:function(){return h}});var a=n(2685),i=n(7378),r=n(7140),s=n(362),o=n(56),l=n(5720),d=n(9169),p="tabList_J5MA",u="tabItem_l0OV";function c(e){var t,n,s=e.lazy,c=e.block,h=e.defaultValue,m=e.values,g=e.groupId,y=e.className,k=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,o.l)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===h?h:null!=(t=null!=h?h:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:k[0].props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),P=N.tabGroupChoices,T=N.setTabGroupChoices,C=(0,i.useState)(b),w=C[0],q=C[1],I=[],U=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var x=P[g];null!=x&&x!==w&&v.some((function(e){return e.value===x}))&&q(x)}var A=function(e){var t=e.currentTarget,n=I.indexOf(t),a=v[n].value;a!==w&&(U(t),q(a),null!=g&&T(g,String(a)))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,i=I.indexOf(e.currentTarget)+1;n=null!=(a=I[i])?a:I[0];break;case"ArrowLeft":var r,s=I.indexOf(e.currentTarget)-1;n=null!=(r=I[s])?r:I[I.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},y)},v.map((function(e){var t=e.value,n=e.label,s=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return I.push(e)},onKeyDown:S,onFocus:A,onClick:A},s,{className:(0,r.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),s?(0,i.cloneElement)(k.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function h(e){var t=(0,s.Z)();return i.createElement(c,(0,a.Z)({key:String(t)},e))}},2853:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return h}});var a=n(2685),i=n(1244),r=(n(7378),n(5318)),s=n(3411),o=n(2453),l=["components"],d={id:"automated-refetching",title:"Automated Re-fetching",sidebar_label:"Automated Re-fetching",hide_title:!0,description:"RTK Query > Usage > Automated Refetching: cache invalidation management"},p=void 0,u={unversionedId:"rtk-query/usage/automated-refetching",id:"rtk-query/usage/automated-refetching",title:"Automated Re-fetching",description:"RTK Query > Usage > Automated Refetching: cache invalidation management",source:"@site/../docs/rtk-query/usage/automated-refetching.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/automated-refetching",permalink:"/rtk-query/usage/automated-refetching",draft:!1,tags:[],version:"current",lastUpdatedAt:1716194519,formattedLastUpdatedAt:"May 20, 2024",frontMatter:{id:"automated-refetching",title:"Automated Re-fetching",sidebar_label:"Automated Re-fetching",hide_title:!0,description:"RTK Query > Usage > Automated Refetching: cache invalidation management"},sidebar:"docs",previous:{title:"Cache Behavior",permalink:"/rtk-query/usage/cache-behavior"},next:{title:"Manual Cache Updates",permalink:"/rtk-query/usage/manual-cache-updates"}},c={},h=[{value:"Definitions",id:"definitions",level:2},{value:"Tags",id:"tags",level:3},{value:"Providing tags",id:"providing-tags",level:3},{value:"Invalidating tags",id:"invalidating-tags",level:3},{value:"Cache tags",id:"cache-tags",level:2},{value:"Providing cache data",id:"providing-cache-data",level:3},{value:"Invalidating cache data",id:"invalidating-cache-data",level:3},{value:"Tag Invalidation Behavior",id:"tag-invalidation-behavior",level:2},{value:"General tag",id:"general-tag",level:3},{value:"Specific tag",id:"specific-tag",level:3},{value:"Recipes",id:"recipes",level:2},{value:"Advanced Invalidation with abstract tag IDs",id:"advanced-invalidation-with-abstract-tag-ids",level:3},{value:"Invalidating everything of a type",id:"invalidating-everything-of-a-type",level:4},{value:"Selectively invalidating lists",id:"selectively-invalidating-lists",level:4},{value:"Providing errors to the cache",id:"providing-errors-to-the-cache",level:3},{value:"Abstracting common provides/invalidates usage",id:"abstracting-common-providesinvalidates-usage",level:3}],m={toc:h};function g(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"automated-re-fetching"},"Automated Re-fetching"),(0,r.kt)("p",null,"As seen under ",(0,r.kt)("a",{parentName:"p",href:"/rtk-query/usage/cache-behavior#default-cache-behavior"},"Default Cache Behavior"),", when a subscription is added for a query endpoint, a request will be sent only if the cache data does not already exist. If it exists, the existing data will be served instead."),(0,r.kt)("p",null,'RTK Query uses a "cache tag" system to automate re-fetching for query endpoints that have data affected by mutation endpoints. This enables designing your API such that firing a specific mutation will cause a certain query endpoint to consider its cached data ',(0,r.kt)("em",{parentName:"p"},"invalid"),", and re-fetch the data if there is an active subscription."),(0,r.kt)("p",null,"Each endpoint + parameter combination contributes its own ",(0,r.kt)("inlineCode",{parentName:"p"},"queryCacheKey"),". The cache tag system enables the ability to inform RTK Query that a particular query cache has ",(0,r.kt)("em",{parentName:"p"},"provided")," specific tags. If a mutation is fired which is said to ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," tags that a query cache has ",(0,r.kt)("em",{parentName:"p"},"provided"),", the cached data will be considered ",(0,r.kt)("em",{parentName:"p"},"invalidated"),", and re-fetch if there is an active subscription to the cached data."),(0,r.kt)("p",null,"For triggering re-fetching through other means, see ",(0,r.kt)("a",{parentName:"p",href:"/rtk-query/usage/cache-behavior#manipulating-cache-behavior"},"Manipulating Cache Behavior"),"."),(0,r.kt)("h2",{id:"definitions"},"Definitions"),(0,r.kt)("h3",{id:"tags"},"Tags"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"see also: ",(0,r.kt)("a",{parentName:"em",href:"/rtk-query/api/createApi#tagtypes"},"tagTypes API reference"))),(0,r.kt)("p",null,"For RTK Query, ",(0,r.kt)("em",{parentName:"p"},"tags")," are just a name that you can give to a specific collection of data to control caching and invalidation behavior for re-fetching purposes. It can be considered as a 'label' attached to cached data that is read after a mutation, to decide whether the data should be affected by the mutation."),(0,r.kt)("p",null,"Tags are defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tagTypes")," argument when defining an api. For example, in an application that has both ",(0,r.kt)("inlineCode",{parentName:"p"},"Posts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Users"),", you might define ",(0,r.kt)("inlineCode",{parentName:"p"},"tagTypes: ['Post', 'User']")," when calling ",(0,r.kt)("inlineCode",{parentName:"p"},"createApi"),"."),(0,r.kt)("p",null,"An individual ",(0,r.kt)("inlineCode",{parentName:"p"},"tag")," has a ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", represented as a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," name, and an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", represented as a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),". It can be represented as a plain string (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'"),"), or an object in the shape ",(0,r.kt)("inlineCode",{parentName:"p"},"{type: string, id?: string|number}")," (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"[{type: 'Post', id: 1}]"),")."),(0,r.kt)("h3",{id:"providing-tags"},"Providing tags"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"see also: ",(0,r.kt)("a",{parentName:"em",href:"/rtk-query/api/createApi#providestags"},"providesTags API reference"))),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"query")," can have its cached data ",(0,r.kt)("em",{parentName:"p"},"provide")," tags. Doing so determines which 'tag' is attached to the cached data returned by the query."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"providesTags")," argument can either be an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"['Post']"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"{type: string, id?: string|number}")," (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"[{type: 'Post', id: 1}]"),"), or a callback that returns such an array. That function will be passed the result as the first argument, the response error as the second argument, and the argument originally passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," method as the third argument. Note that either the result or error arguments may be undefined based on whether the query was successful or not."),(0,r.kt)("h3",{id:"invalidating-tags"},"Invalidating tags"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"see also: ",(0,r.kt)("a",{parentName:"em",href:"/rtk-query/api/createApi#invalidatestags"},"invalidatesTags API reference"))),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"mutation")," can ",(0,r.kt)("em",{parentName:"p"},"invalidate")," specific cached data based on the tags. Doing so determines which cached data will be either refetched or removed from the cache."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidatesTags")," argument can either be an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"['Post']"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"{type: string, id?: string|number}")," (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"[{type: 'Post', id: 1}]"),"), or a callback that returns such an array. That function will be passed the result as the first argument, the response error as the second argument, and the argument originally passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," method as the third argument. Note that either the result or error arguments may be undefined based on whether the mutation was successful or not."),(0,r.kt)("h2",{id:"cache-tags"},"Cache tags"),(0,r.kt)("p",null,"RTK Query uses the concept of 'tags' to determine whether a mutation for one endpoint intends to ",(0,r.kt)("em",{parentName:"p"},"invalidate")," some data that was ",(0,r.kt)("em",{parentName:"p"},"provided")," by a query from another endpoint."),(0,r.kt)("p",null,"If cache data is being invalidated, it will either refetch the providing query (if components are still using that data) or remove the data from the cache."),(0,r.kt)("p",null,"When defining an API slice, ",(0,r.kt)("inlineCode",{parentName:"p"},"createApi")," accepts an array of tag type names for the ",(0,r.kt)("inlineCode",{parentName:"p"},"tagTypes")," property, which is a list of possible tag name options that the queries for the API slice could provide."),(0,r.kt)("p",null,"The example below declares that endpoints can possibly provide 'Posts' and/or 'Users' to the cache:"),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of declaring cache tags"',title:'"Example',of:!0,declaring:!0,cache:!0,'tags"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  // highlight-start\n  tagTypes: ['Post', 'User'],\n  // highlight-end\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => '/posts',\n    }),\n    getUsers: build.query<User[], void>({\n      query: () => '/users',\n    }),\n    addPost: build.mutation<Post, Omit<Post, 'id'>>({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n    }),\n    editPost: build.mutation<Post, Partial<Post> & Pick<Post, 'id'>>({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of declaring cache tags"',title:'"Example',of:!0,declaring:!0,cache:!0,'tags"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  // highlight-start\n  tagTypes: ['Post', 'User'],\n  // highlight-end\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => '/posts',\n    }),\n    getUsers: build.query({\n      query: () => '/users',\n    }),\n    addPost: build.mutation({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n    }),\n    editPost: build.mutation({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"By declaring these tags as what can possibly be provided to the cache, it enables control for individual mutation endpoints to claim whether they affect specific portions of the cache or not, in conjunction with ",(0,r.kt)("inlineCode",{parentName:"p"},"providesTags")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidatesTags")," on individual endpoints."),(0,r.kt)("h3",{id:"providing-cache-data"},"Providing cache data"),(0,r.kt)("p",null,"Each individual ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," endpoint can have its cached data ",(0,r.kt)("em",{parentName:"p"},"provide")," particular tags. Doing so enables a relationship between cached data from one or more query endpoints and the behaviour of one or more mutation endpoints."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"providesTags")," property on a ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," endpoint is used for this purpose."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Provided tags have no inherent relationship across separate ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," endpoints. Provided tags are used to determine whether cached data returned by an endpoint should be ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidated")," and either be refetched or removed from the cache. If two separate endpoints provide the same tags, they will still contribute their own distinct cached data, which could later both be invalidated by a single tag declared from a mutation.")),(0,r.kt)("p",null,"The example below declares that the ",(0,r.kt)("inlineCode",{parentName:"p"},"getPosts")," ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"provides")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'")," tag to the cache, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"providesTags")," property for a ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," endpoint."),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of providing tags to the cache"',title:'"Example',of:!0,providing:!0,tags:!0,to:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => '/posts',\n      // highlight-start\n      providesTags: ['Post'],\n      // highlight-end\n    }),\n    getUsers: build.query<User[], void>({\n      query: () => '/users',\n      // highlight-start\n      providesTags: ['User'],\n      // highlight-end\n    }),\n    addPost: build.mutation<Post, Omit<Post, 'id'>>({\n      query: (body) => ({\n        url: 'posts',\n        method: 'POST',\n        body,\n      }),\n    }),\n    editPost: build.mutation<Post, Partial<Post> & Pick<Post, 'id'>>({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of providing tags to the cache"',title:'"Example',of:!0,providing:!0,tags:!0,to:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => '/posts',\n      // highlight-start\n      providesTags: ['Post'],\n      // highlight-end\n    }),\n    getUsers: build.query({\n      query: () => '/users',\n      // highlight-start\n      providesTags: ['User'],\n      // highlight-end\n    }),\n    addPost: build.mutation({\n      query: (body) => ({\n        url: 'posts',\n        method: 'POST',\n        body,\n      }),\n    }),\n    editPost: build.mutation({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"For more granular control over the provided data, provided ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," can have an associated ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". This enables a distinction between 'any of a particular tag type', and 'a specific instance of a particular tag type'."),(0,r.kt)("p",null,"The example below declares that the provided posts are associated with particular IDs as determined by the result returned by the endpoint:"),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of providing tags with IDs to the cache"',title:'"Example',of:!0,providing:!0,tags:!0,with:!0,IDs:!0,to:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => '/posts',\n      // highlight-start\n      providesTags: (result, error, arg) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Post' as const, id })), 'Post']\n          : ['Post'],\n      // highlight-end\n    }),\n    getUsers: build.query<User[], void>({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addPost: build.mutation<Post, Omit<Post, 'id'>>({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n    }),\n    editPost: build.mutation<Post, Partial<Post> & Pick<Post, 'id'>>({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of providing tags with IDs to the cache"',title:'"Example',of:!0,providing:!0,tags:!0,with:!0,IDs:!0,to:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => '/posts',\n      // highlight-start\n      providesTags: (result, error, arg) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Post', id })), 'Post']\n          : ['Post'],\n      // highlight-end\n    }),\n    getUsers: build.query({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addPost: build.mutation({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n    }),\n    editPost: build.mutation({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"Note that for the example above, the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is used where possible on a successful result. In the case of an error, no result is supplied, and we still consider that it has provided the general ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'")," tag type rather than any specific instance of that tag."),(0,r.kt)("admonition",{title:"Advanced List Invalidation",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In order to provide stronger control over invalidating the appropriate data, you can use an arbitrary ID such as ",(0,r.kt)("inlineCode",{parentName:"p"},"'LIST'")," for a given tag. See ",(0,r.kt)("a",{parentName:"p",href:"#advanced-invalidation-with-abstract-tag-ids"},"Advanced Invalidation with abstract tag IDs")," for additional details.")),(0,r.kt)("h3",{id:"invalidating-cache-data"},"Invalidating cache data"),(0,r.kt)("p",null,"Each individual mutation endpoint can ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," particular tags for existing cached data. Doing so enables a relationship between cached data from one or more query endpoints and the behaviour of one or more mutation endpoints."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidatesTags")," property on a mutation endpoint is used for this purpose."),(0,r.kt)("p",null,"The example below declares that the ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"editPost")," mutation endpoints ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," any cached data with the ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'")," tag, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidatesTags")," property for a mutation endpoint:"),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of invalidating tags in the cache"',title:'"Example',of:!0,invalidating:!0,tags:!0,in:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => '/posts',\n      providesTags: (result, error, arg) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Post' as const, id })), 'Post']\n          : ['Post'],\n    }),\n    getUsers: build.query<User[], void>({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addPost: build.mutation<Post, Omit<Post, 'id'>>({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n      // highlight-start\n      invalidatesTags: ['Post'],\n      // highlight-end\n    }),\n    editPost: build.mutation<Post, Partial<Post> & Pick<Post, 'id'>>({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n      // highlight-start\n      invalidatesTags: ['Post'],\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of invalidating tags in the cache"',title:'"Example',of:!0,invalidating:!0,tags:!0,in:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => '/posts',\n      providesTags: (result, error, arg) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Post', id })), 'Post']\n          : ['Post'],\n    }),\n    getUsers: build.query({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addPost: build.mutation({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n      // highlight-start\n      invalidatesTags: ['Post'],\n      // highlight-end\n    }),\n    editPost: build.mutation({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n      // highlight-start\n      invalidatesTags: ['Post'],\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"For the example above, this tells RTK Query that after the ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"editPost")," mutations are called and completed, any cache data supplied with the ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'")," tag is no longer valid. If a component is currently subscribed to the cached data for a ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'")," tag after the above mutations are called and complete, it will automatically re-fetch in order to retrieve up to date data from the server."),(0,r.kt)("p",null,"An example scenario would be like so:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A component is rendered which is using the ",(0,r.kt)("inlineCode",{parentName:"li"},"useGetPostsQuery()")," hook to subscribe to that endpoint's cached data"),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"/posts")," request is fired off, and server responds with posts with IDs 1, 2 & 3"),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"getPosts")," endpoint stores the received data in the cache, and internally registers that the following tags have been provided:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[\n  { type: 'Post', id: 1 },\n  { type: 'Post', id: 2 },\n  { type: 'Post', id: 3 },\n]\n"))),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"editPost")," mutation is fired off to alter a particular post"),(0,r.kt)("li",{parentName:"ol"},"Upon completion, RTK Query internally registers that the ",(0,r.kt)("inlineCode",{parentName:"li"},"'Post'")," tag is now invalidated, and removes the previously provided ",(0,r.kt)("inlineCode",{parentName:"li"},"'Post'")," tags from the cache"),(0,r.kt)("li",{parentName:"ol"},"Since the ",(0,r.kt)("inlineCode",{parentName:"li"},"getPosts")," endpoint has provided tags of type ",(0,r.kt)("inlineCode",{parentName:"li"},"'Post'")," which now has invalid cache data, and the component is still subscribed to the data, the ",(0,r.kt)("inlineCode",{parentName:"li"},"/posts")," request is automatically fired off again, fetching new data and registering new tags for the updated cached data")),(0,r.kt)("p",null,"For more granular control over the invalidated data, invalidated ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," can have an associated ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in the same manner as ",(0,r.kt)("inlineCode",{parentName:"p"},"providesTags"),". This enables a distinction between 'any of a particular tag type' and 'a specific instance of a particular tag type'."),(0,r.kt)("p",null,"The example below declares that the ",(0,r.kt)("inlineCode",{parentName:"p"},"editPost")," mutation invalidates a specific instance of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," tag, using the ID passed in when calling the mutation function:"),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of invalidating tags with IDs to the cache"',title:'"Example',of:!0,invalidating:!0,tags:!0,with:!0,IDs:!0,to:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => '/posts',\n      providesTags: (result, error, arg) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Post' as const, id })), 'Post']\n          : ['Post'],\n    }),\n    getUsers: build.query<User[], void>({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addPost: build.mutation<Post, Omit<Post, 'id'>>({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Post'],\n    }),\n    editPost: build.mutation<Post, Partial<Post> & Pick<Post, 'id'>>({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n      // highlight-start\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }],\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of invalidating tags with IDs to the cache"',title:'"Example',of:!0,invalidating:!0,tags:!0,with:!0,IDs:!0,to:!0,the:!0,'cache"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => '/posts',\n      providesTags: (result, error, arg) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Post', id })), 'Post']\n          : ['Post'],\n    }),\n    getUsers: build.query({\n      query: () => '/users',\n      providesTags: ['User'],\n    }),\n    addPost: build.mutation({\n      query: (body) => ({\n        url: 'post',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Post'],\n    }),\n    editPost: build.mutation({\n      query: (body) => ({\n        url: `post/${body.id}`,\n        method: 'POST',\n        body,\n      }),\n      // highlight-start\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }],\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"For the example above, rather than invalidating any tag with the type ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'"),", calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"editPost")," mutation function will now only invalidate a tag for the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". I.e. if cached data from an endpoint does not provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"'Post'")," for that same ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", it will remain considered as 'valid', and will not be triggered to automatically re-fetch."),(0,r.kt)("admonition",{title:"Using abstract tag IDs",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In order to provide stronger control over invalidating the appropriate data, you can use an arbitrary ID such as ",(0,r.kt)("inlineCode",{parentName:"p"},"'LIST'")," for a given tag. See ",(0,r.kt)("a",{parentName:"p",href:"#advanced-invalidation-with-abstract-tag-ids"},"Advanced Invalidation with abstract tag IDs")," for additional details.")),(0,r.kt)("h2",{id:"tag-invalidation-behavior"},"Tag Invalidation Behavior"),(0,r.kt)("p",null,"The matrix below shows examples of which invalidated tags will affect and invalidate which provided tags:"),(0,r.kt)("table",{className:"checkbox-table"},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{className:"diagonal-cell"},(0,r.kt)("div",{className:"diagonal-cell--content"},(0,r.kt)("div",{className:"diagonal-cell--topRight"},"Provided"),(0,r.kt)("div",{className:"diagonal-cell--bottomLeft"},"Invalidated"))),(0,r.kt)("th",null,(0,r.kt)("div",null,"General tag A"),(0,r.kt)("div",{style:{fontWeight:"normal",fontSize:"0.9rem"}},"['Post']",(0,r.kt)("br",null),"/",(0,r.kt)("br",null),"[{ type: 'Post' }]")),(0,r.kt)("th",null,(0,r.kt)("div",null,"General tag B"),(0,r.kt)("div",{style:{fontWeight:"normal",fontSize:"0.9rem"}},"['User']",(0,r.kt)("br",null),"/",(0,r.kt)("br",null),"[{ type: 'User' }]")),(0,r.kt)("th",null,(0,r.kt)("div",null,"Specific tag A1"),(0,r.kt)("div",{style:{fontWeight:"normal",fontSize:"0.9rem"}},"[{ type: 'Post',",(0,r.kt)("br",null)," id: 1 }]")),(0,r.kt)("th",null,(0,r.kt)("div",null,"Specific tag A2"),(0,r.kt)("div",{style:{fontWeight:"normal",fontSize:"0.9rem"}},"[{ type: 'Post', id: 'LIST' }]")),(0,r.kt)("th",null,(0,r.kt)("div",null,"Specific tag B1"),(0,r.kt)("div",{style:{fontWeight:"normal",fontSize:"0.9rem"}},"[{ type: 'User',",(0,r.kt)("br",null)," id: 1 }]")),(0,r.kt)("th",null,(0,r.kt)("div",null,"Specific tag B2"),(0,r.kt)("div",{style:{fontWeight:"normal",fontSize:"0.9rem"}},"[{ type: 'User',",(0,r.kt)("br",null)," id: 2 }]")))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{fontWeight:"bold"}},"General tag A"),(0,r.kt)("div",{style:{fontSize:"0.9rem"}},"['Post'] / [{ type: 'Post' }]")),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{fontWeight:"bold"}},"General tag B"),(0,r.kt)("div",{style:{fontSize:"0.9rem"}},"['User'] /",(0,r.kt)("br",null),"[{ type: 'User' }]")),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null,"\u2714\ufe0f")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{fontWeight:"bold"}},"Specific tag A1"),(0,r.kt)("div",{style:{fontSize:"0.9rem"}},"[{ type: 'Post', id: 1 }]")),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{fontWeight:"bold"}},"Specific tag A2"),(0,r.kt)("div",{style:{fontSize:"0.9rem"}},"[{ type: 'Post', id: 'LIST' }]")),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{fontWeight:"bold"}},"Specific tag B1"),(0,r.kt)("div",{style:{fontSize:"0.9rem"}},"[{ type: 'User', id: 1 }]")),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f"),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{fontWeight:"bold"}},"Specific tag B2"),(0,r.kt)("div",{style:{fontSize:"0.9rem"}},"[{ type: 'User', id: 2 }]")),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null,"\u2714\ufe0f")))),(0,r.kt)("p",null,"The invalidation behavior is summarized based on tag specificity in the sections below."),(0,r.kt)("h3",{id:"general-tag"},"General tag"),(0,r.kt)("p",null,"e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"['Post'] / [{ type: 'Post' }]")),(0,r.kt)("p",null,"Will ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," any ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," tag with the matching type, including general and specific tags."),(0,r.kt)("p",null,"Example:",(0,r.kt)("br",{parentName:"p"}),"\n","If a general tag of ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," was invalidated, endpoints whose data ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," the following tags would all have their data invalidated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['Post']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post' }, { type: 'Post', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }, { type: 'User' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 'LIST' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }, { type: 'Post', id: 'LIST' }]"))),(0,r.kt)("p",null,"Endpoints whose data ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," the following tags would ",(0,r.kt)("em",{parentName:"p"},"not")," have their data invalidated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['User']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 'LIST' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 1 }, { type: 'User', id: 'LIST' }]"))),(0,r.kt)("h3",{id:"specific-tag"},"Specific tag"),(0,r.kt)("p",null,"e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"[{ type: 'Post', id: 1 }]")),(0,r.kt)("p",null,"Will ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," any ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," tag with both the matching type, ",(0,r.kt)("em",{parentName:"p"},"and")," matching id. Will not cause a ",(0,r.kt)("inlineCode",{parentName:"p"},"general")," tag to be invalidated directly, but ",(0,r.kt)("em",{parentName:"p"},"might")," invalidate data for an endpoint that provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"general")," tag ",(0,r.kt)("em",{parentName:"p"},"if")," it also provides a matching ",(0,r.kt)("inlineCode",{parentName:"p"},"specific")," tag."),(0,r.kt)("p",null,"Example 1:\nIf a specific tag of ",(0,r.kt)("inlineCode",{parentName:"p"},"{ type: 'Post', id: 1 }")," was invalidated, endpoints whose data ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," the following tags would all have their data invalidated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post' }, { type: 'Post', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }, { type: 'User' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }, { type: 'Post', id: 'LIST' }]"))),(0,r.kt)("p",null,"Endpoints whose data ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," the following tags would ",(0,r.kt)("em",{parentName:"p"},"not")," have their data invalidated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['Post']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 'LIST' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['User']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 'LIST' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 1 }, { type: 'User', id: 'LIST' }]"))),(0,r.kt)("p",null,"Example 2:\nIf a specific tag of ",(0,r.kt)("inlineCode",{parentName:"p"},"{ type: 'Post', id: 'LIST' }")," was invalidated, endpoints whose data ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," the following tags would all have their data invalidated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 'LIST' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }, { type: 'Post', id: 'LIST' }]"))),(0,r.kt)("p",null,"Endpoints whose data ",(0,r.kt)("inlineCode",{parentName:"p"},"provided")," the following tags would ",(0,r.kt)("em",{parentName:"p"},"not")," have their data invalidated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['Post']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post' }, { type: 'Post', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Post', id: 1 }, { type: 'User' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['User']")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 1 }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 'LIST' }]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'User', id: 1 }, { type: 'User', id: 'LIST' }]"))),(0,r.kt)("h2",{id:"recipes"},"Recipes"),(0,r.kt)("h3",{id:"advanced-invalidation-with-abstract-tag-ids"},"Advanced Invalidation with abstract tag IDs"),(0,r.kt)("p",null,"While using an 'entity ID' for a tag ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is a common use case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," property is not intended to be limited to database IDs alone. The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is simply a way to label a subset of a particular collection of data for a particular ",(0,r.kt)("inlineCode",{parentName:"p"},"tag type"),"."),(0,r.kt)("p",null,"A powerful use-case is to use an ID like ",(0,r.kt)("inlineCode",{parentName:"p"},"'LIST'")," as a label for data provided by a bulk query, ",(0,r.kt)("em",{parentName:"p"},"as well as")," using entity IDs for the individual items. Doing so allows future ",(0,r.kt)("inlineCode",{parentName:"p"},"mutations")," to declare whether they invalidate the data only if it contains a particular item (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"{ type: 'Post', id: 5 }"),"), or invalidate the data if it is a ",(0,r.kt)("inlineCode",{parentName:"p"},"'LIST'")," (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"{ type: 'Post', id: 'LIST' }"),")."),(0,r.kt)("admonition",{title:"'LIST' Tag and IDs",type:"info"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"LIST")," is an arbitrary string - technically speaking, you could use anything you want here, such as ",(0,r.kt)("inlineCode",{parentName:"li"},"ALL")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"*"),". The important thing when choosing a custom id is to make sure there is no possibility of it colliding with an id that is returned by a query result. If you have unknown ids in your query results and don't want to risk it, you can go with point 3 below."),(0,r.kt)("li",{parentName:"ol"},"You can add ",(0,r.kt)("em",{parentName:"li"},"many")," tag types for even more control",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[{ type: 'Posts', id: 'LIST' }, { type: 'Posts', id: 'SVELTE_POSTS' }, { type: 'Posts', id: 'REACT_POSTS' }]")))),(0,r.kt)("li",{parentName:"ol"},"If the concept of using an ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," like 'LIST' seems strange to you, you can always add another ",(0,r.kt)("inlineCode",{parentName:"li"},"tagType")," and invalidate its root, but we recommend using the ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," approach as shown."))),(0,r.kt)("p",null,"We can compare the scenarios below to see how using a ",(0,r.kt)("inlineCode",{parentName:"p"},"'LIST'")," id can be leveraged to optimize behaviour."),(0,r.kt)("h4",{id:"invalidating-everything-of-a-type"},"Invalidating everything of a type"),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="API Definition"',title:'"API','Definition"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport type { Post, User } from './types'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => 'posts',\n      providesTags: (result) =>\n        result ? result.map(({ id }) => ({ type: 'Posts', id })) : ['Posts'],\n    }),\n    addPost: build.mutation<Post, Partial<Post>>({\n      query: (body) => ({\n        url: `post`,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Posts'],\n    }),\n    getPost: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n  }),\n})\n\nexport const { useGetPostsQuery, useGetPostQuery, useAddPostMutation } = api\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="API Definition"',title:'"API','Definition"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => 'posts',\n      providesTags: (result) =>\n        result ? result.map(({ id }) => ({ type: 'Posts', id })) : ['Posts'],\n    }),\n    addPost: build.mutation({\n      query: (body) => ({\n        url: `post`,\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: ['Posts'],\n    }),\n    getPost: build.query({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n  }),\n})\n\nexport const { useGetPostsQuery, useGetPostQuery, useAddPostMutation } = api\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="App.tsx"',"no-transpile":!0,title:'"App.tsx"'},"function App() {\n  const { data: posts } = useGetPostsQuery()\n  const [addPost] = useAddPostMutation()\n\n  return (\n    <div>\n      <AddPost onAdd={addPost} />\n      <PostsList />\n      {/* Assume each PostDetail is subscribed via `const {data} = useGetPostQuery(id)` */}\n      <PostDetail id={1} />\n      <PostDetail id={2} />\n      <PostDetail id={3} />\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What to expect")),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," is triggered, it would cause each ",(0,r.kt)("inlineCode",{parentName:"p"},"PostDetail")," component to go back into a ",(0,r.kt)("inlineCode",{parentName:"p"},"isFetching")," state because ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," invalidates the root tag, which causes ",(0,r.kt)("em",{parentName:"p"},"every query")," that provides 'Posts' to be re-run. In most cases, this may not be what you want to do. Imagine if you had 100 posts on the screen that all subscribed to a ",(0,r.kt)("inlineCode",{parentName:"p"},"getPost")," query \u2013 in this case, you'd create 100 requests and send a ton of unnecessary traffic to your server, which we're trying to avoid in the first place! Even though the user would still see the last good cached result and potentially not notice anything other than their browser hiccuping, you still want to avoid this."),(0,r.kt)("h4",{id:"selectively-invalidating-lists"},"Selectively invalidating lists"),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="API Definition"',title:'"API','Definition"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport type { Post, User } from './types'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => 'posts',\n      providesTags: (result) =>\n        result\n          ? [\n              ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n              { type: 'Posts', id: 'LIST' },\n            ]\n          : [{ type: 'Posts', id: 'LIST' }],\n    }),\n    addPost: build.mutation<Post, Partial<Post>>({\n      query(body) {\n        return {\n          url: `post`,\n          method: 'POST',\n          body,\n        }\n      },\n      invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n    }),\n    getPost: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n  }),\n})\n\nexport const { useGetPostsQuery, useAddPostMutation, useGetPostQuery } = api\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="API Definition"',title:'"API','Definition"':!0},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => 'posts',\n      providesTags: (result) =>\n        result\n          ? [\n              ...result.map(({ id }) => ({ type: 'Posts', id })),\n              { type: 'Posts', id: 'LIST' },\n            ]\n          : [{ type: 'Posts', id: 'LIST' }],\n    }),\n    addPost: build.mutation({\n      query(body) {\n        return {\n          url: `post`,\n          method: 'POST',\n          body,\n        }\n      },\n      invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n    }),\n    getPost: build.query({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Posts', id }],\n    }),\n  }),\n})\n\nexport const { useGetPostsQuery, useAddPostMutation, useGetPostQuery } = api\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="App.tsx"',"no-transpile":!0,title:'"App.tsx"'},"function App() {\n  const { data: posts } = useGetPostsQuery()\n  const [addPost] = useAddPostMutation()\n\n  return (\n    <div>\n      <AddPost onAdd={addPost} />\n      <PostsList />\n      {/* Assume each PostDetail is subscribed via `const {data} = useGetPostQuery(id)` */}\n      <PostDetail id={1} />\n      <PostDetail id={2} />\n      <PostDetail id={3} />\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What to expect")),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," is fired, it will only cause the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostsList")," to go into an ",(0,r.kt)("inlineCode",{parentName:"p"},"isFetching")," state because ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," only invalidates the ",(0,r.kt)("inlineCode",{parentName:"p"},"'LIST'")," id, which causes ",(0,r.kt)("inlineCode",{parentName:"p"},"getPosts")," to rerun (because it provides that specific id). So in your network tab, you would only see 1 new request fire for ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /posts"),". As the singular ",(0,r.kt)("inlineCode",{parentName:"p"},"getPost")," queries have not been invalidated, they will not re-run as a result of ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you intend for the ",(0,r.kt)("inlineCode",{parentName:"p"},"addPost")," mutation to refresh all posts including individual ",(0,r.kt)("inlineCode",{parentName:"p"},"PostDetail")," components while still only making 1 new ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /posts")," request, this can be done by selecting a part of the data using ",(0,r.kt)("a",{parentName:"p",href:"/rtk-query/usage/queries#selecting-data-from-a-query-result"},(0,r.kt)("inlineCode",{parentName:"a"},"selectFromResult")),".")),(0,r.kt)("h3",{id:"providing-errors-to-the-cache"},"Providing errors to the cache"),(0,r.kt)("p",null,"The information provided to the cache is not limited to successful data fetches. The concept can be used to inform RTK Query that when a particular failure has been encountered, to ",(0,r.kt)("inlineCode",{parentName:"p"},"provide")," a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"tag")," for that failed cache data. A separate endpoint can then ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," the data for that ",(0,r.kt)("inlineCode",{parentName:"p"},"tag"),", telling RTK Query to re-attempt the previously failed endpoints if a component is still subscribed to the failed data."),(0,r.kt)("p",null,"The example below demonstrates an example with the following behaviour:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Provides an ",(0,r.kt)("inlineCode",{parentName:"li"},"UNAUTHORIZED")," cache tag if a query fails with an error code of ",(0,r.kt)("inlineCode",{parentName:"li"},"401 UNAUTHORIZED")),(0,r.kt)("li",{parentName:"ul"},"Provides an ",(0,r.kt)("inlineCode",{parentName:"li"},"UNKNOWN_ERROR")," cache tag if a query fails with a different error"),(0,r.kt)("li",{parentName:"ul"},"Enables a 'login' mutation, which when ",(0,r.kt)("em",{parentName:"li"},"successful"),", will ",(0,r.kt)("inlineCode",{parentName:"li"},"invalidate")," the data with the ",(0,r.kt)("inlineCode",{parentName:"li"},"UNAUTHORIZED")," tag.",(0,r.kt)("br",{parentName:"li"}),"This will trigger the ",(0,r.kt)("inlineCode",{parentName:"li"},"postById")," endpoint to re-fire if:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"The last call for ",(0,r.kt)("inlineCode",{parentName:"li"},"postById")," had encountered an unauthorized error, and"),(0,r.kt)("li",{parentName:"ol"},"A component is still subscribed to the cached data"))),(0,r.kt)("li",{parentName:"ul"},"Enables a 'refetchErroredQueries' mutation which when ",(0,r.kt)("em",{parentName:"li"},"called"),", will ",(0,r.kt)("inlineCode",{parentName:"li"},"invalidate")," the data with the ",(0,r.kt)("inlineCode",{parentName:"li"},"UNKNOWN_ERROR")," tag.",(0,r.kt)("br",{parentName:"li"}),"This will trigger the ",(0,r.kt)("inlineCode",{parentName:"li"},"postById")," endpoint to re-fire if:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"The last call for ",(0,r.kt)("inlineCode",{parentName:"li"},"postById")," had encountered an unknown error, and"),(0,r.kt)("li",{parentName:"ol"},"A component is still subscribed to the cached data")))),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport { Post, LoginResponse } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com' }),\n  tagTypes: ['Post', 'UNAUTHORIZED', 'UNKNOWN_ERROR'],\n  endpoints: (build) => ({\n    postById: build.query<Post, number>({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) =>\n        result\n          ? [{ type: 'Post', id }]\n          : error?.status === 401\n          ? ['UNAUTHORIZED']\n          : ['UNKNOWN_ERROR'],\n    }),\n    login: build.mutation<LoginResponse, void>({\n      query: () => '/login',\n      // on successful login, will refetch all currently\n      // 'UNAUTHORIZED' queries\n      invalidatesTags: (result) => (result ? ['UNAUTHORIZED'] : []),\n    }),\n    refetchErroredQueries: build.mutation<null, void>({\n      queryFn: () => ({ data: null }),\n      invalidatesTags: ['UNKNOWN_ERROR'],\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com' }),\n  tagTypes: ['Post', 'UNAUTHORIZED', 'UNKNOWN_ERROR'],\n  endpoints: (build) => ({\n    postById: build.query({\n      query: (id) => `post/${id}`,\n      providesTags: (result, error, id) =>\n        result\n          ? [{ type: 'Post', id }]\n          : error?.status === 401\n          ? ['UNAUTHORIZED']\n          : ['UNKNOWN_ERROR'],\n    }),\n    login: build.mutation({\n      query: () => '/login',\n      // on successful login, will refetch all currently\n      // 'UNAUTHORIZED' queries\n      invalidatesTags: (result) => (result ? ['UNAUTHORIZED'] : []),\n    }),\n    refetchErroredQueries: build.mutation({\n      queryFn: () => ({ data: null }),\n      invalidatesTags: ['UNKNOWN_ERROR'],\n    }),\n  }),\n})\n")))),(0,r.kt)("h3",{id:"abstracting-common-providesinvalidates-usage"},"Abstracting common provides/invalidates usage"),(0,r.kt)("p",null,"The code written to ",(0,r.kt)("inlineCode",{parentName:"p"},"provide")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"invalidate")," tags for a given API slice will be dependent on multiple factors, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The shape of the data returned by your backend"),(0,r.kt)("li",{parentName:"ul"},"Which tags you expect a given query endpoint to provide"),(0,r.kt)("li",{parentName:"ul"},"Which tags you expect a given mutation endpoint to invalidate"),(0,r.kt)("li",{parentName:"ul"},"The extent that you wish to use the invalidation feature for")),(0,r.kt)("p",null,"When declaring your API slice, you may feel as though you're duplicating your code. For instance, for two separate endpoints that both provide a list of a particular entity, the ",(0,r.kt)("inlineCode",{parentName:"p"},"providesTags")," declaration may only differ in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tagType")," provided."),(0,r.kt)("p",null,"e.g."),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com' }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query<Post[], void>({\n      query: () => `posts`,\n      // highlight-start\n      providesTags: (result) =>\n        result\n          ? [\n              { type: 'Post', id: 'LIST' },\n              ...result.map(({ id }) => ({ type: 'Post' as const, id })),\n            ]\n          : [{ type: 'Post', id: 'LIST' }],\n      // highlight-end\n    }),\n    getUsers: build.query<User[], void>({\n      query: () => `users`,\n      // highlight-start\n      providesTags: (result) =>\n        result\n          ? [\n              { type: 'User', id: 'LIST' },\n              ...result.map(({ id }) => ({ type: 'User' as const, id })),\n            ]\n          : [{ type: 'User', id: 'LIST' }],\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com' }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => `posts`,\n      // highlight-start\n      providesTags: (result) =>\n        result\n          ? [\n              { type: 'Post', id: 'LIST' },\n              ...result.map(({ id }) => ({ type: 'Post', id })),\n            ]\n          : [{ type: 'Post', id: 'LIST' }],\n      // highlight-end\n    }),\n    getUsers: build.query({\n      query: () => `users`,\n      // highlight-start\n      providesTags: (result) =>\n        result\n          ? [\n              { type: 'User', id: 'LIST' },\n              ...result.map(({ id }) => ({ type: 'User', id })),\n            ]\n          : [{ type: 'User', id: 'LIST' }],\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"You may find it beneficial to define helper functions designed for your particular api to reduce this boilerplate across endpoint definitions, e.g."),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post, User } from './types'\n\n// highlight-start\nfunction providesList<R extends { id: string | number }[], T extends string>(\n  resultsWithIds: R | undefined,\n  tagType: T\n) {\n  return resultsWithIds\n    ? [\n        { type: tagType, id: 'LIST' },\n        ...resultsWithIds.map(({ id }) => ({ type: tagType, id })),\n      ]\n    : [{ type: tagType, id: 'LIST' }]\n}\n// highlight-end\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com' }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => `posts`,\n      // highlight-start\n      providesTags: (result) => providesList(result, 'Post'),\n      // highlight-end\n    }),\n    getUsers: build.query({\n      query: () => `users`,\n      // highlight-start\n      providesTags: (result) => providesList(result, 'User'),\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\n// highlight-start\nfunction providesList(resultsWithIds, tagType) {\n  return resultsWithIds\n    ? [\n        { type: tagType, id: 'LIST' },\n        ...resultsWithIds.map(({ id }) => ({ type: tagType, id })),\n      ]\n    : [{ type: tagType, id: 'LIST' }]\n}\n// highlight-end\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com' }),\n  tagTypes: ['Post', 'User'],\n  endpoints: (build) => ({\n    getPosts: build.query({\n      query: () => `posts`,\n      // highlight-start\n      providesTags: (result) => providesList(result, 'Post'),\n      // highlight-end\n    }),\n    getUsers: build.query({\n      query: () => `users`,\n      // highlight-start\n      providesTags: (result) => providesList(result, 'User'),\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,r.kt)("p",null,"An example of various abstractions for tag providing/invalidating designed for common rest data formats can be seen in the following gist, including typescript support, and factoring both ",(0,r.kt)("a",{parentName:"p",href:"#advanced-invalidation-with-abstract-tag-ids"},"'LIST' style advanced tag invalidation")," and ",(0,r.kt)("a",{parentName:"p",href:"#providing-errors-to-the-cache"},"'error' style tag invalidation"),": ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://gist.github.com/Shrugsy/6b6af02aef1f783df9d636526c1e05fa"},"RTK Query cache utils")),"."))}g.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),h=i,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||r;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);