"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[22],{3411:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(7378),a=n(7140),i="tabItem_wHwb";function o(e){var t=e.children,n=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:n},t)}},2453:function(e,t,n){n.d(t,{Z:function(){return g}});var r=n(2685),a=n(7378),i=n(7140),o=n(362),l=n(56),s=n(5720),p=n(9169),u="tabList_J5MA",c="tabItem_l0OV";function d(e){var t,n,o=e.lazy,d=e.block,g=e.defaultValue,m=e.values,f=e.groupId,h=e.className,k=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,l.l)(v,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===g?g:null!=(t=null!=g?g:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:k[0].props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),w=N.tabGroupChoices,C=N.setTabGroupChoices,O=(0,a.useState)(b),E=O[0],x=O[1],A=[],I=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var P=w[f];null!=P&&P!==E&&v.some((function(e){return e.value===P}))&&x(P)}var T=function(e){var t=e.currentTarget,n=A.indexOf(t),r=v[n].value;r!==E&&(I(t),x(r),null!=f&&C(f,String(r)))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r,a=A.indexOf(e.currentTarget)+1;n=null!=(r=A[a])?r:A[0];break;case"ArrowLeft":var i,o=A.indexOf(e.currentTarget)-1;n=null!=(i=A[o])?i:A[A.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},h)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return A.push(e)},onKeyDown:j,onFocus:T,onClick:T},o,{className:(0,i.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),o?(0,a.cloneElement)(k.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function g(e){var t=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},7002:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(2685),a=n(1244),i=(n(7378),n(5318)),o=(n(3411),n(2453),["components"]),l={id:"code-generation",title:"Code Generation",sidebar_label:"Code Generation",hide_title:!0,description:"RTK Query > Usage > Code Generation: automated creation of API code"},s=void 0,p={unversionedId:"rtk-query/usage/code-generation",id:"rtk-query/usage/code-generation",title:"Code Generation",description:"RTK Query > Usage > Code Generation: automated creation of API code",source:"@site/../docs/rtk-query/usage/code-generation.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/code-generation",permalink:"/rtk-query/usage/code-generation",draft:!1,tags:[],version:"current",lastUpdatedAt:1716194519,formattedLastUpdatedAt:"May 20, 2024",frontMatter:{id:"code-generation",title:"Code Generation",sidebar_label:"Code Generation",hide_title:!0,description:"RTK Query > Usage > Code Generation: automated creation of API code"},sidebar:"docs",previous:{title:"Code Splitting",permalink:"/rtk-query/usage/code-splitting"},next:{title:"Server Side Rendering",permalink:"/rtk-query/usage/server-side-rendering"}},u={},c=[{value:"GraphQL",id:"graphql",level:2},{value:"OpenAPI",id:"openapi",level:2},{value:"Usage",id:"usage",level:3},{value:"Generating tags",id:"generating-tags",level:4},{value:"Programmatic usage",id:"programmatic-usage",level:3},{value:"Config file options",id:"config-file-options",level:3},{value:"Simple usage",id:"simple-usage",level:4},{value:"Filtering endpoints",id:"filtering-endpoints",level:4},{value:"Endpoint overrides",id:"endpoint-overrides",level:4},{value:"Generating hooks",id:"generating-hooks",level:4},{value:"Multiple output files",id:"multiple-output-files",level:4}],d={toc:c};function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"code-generation"},"Code Generation"),(0,i.kt)("p",null,"RTK Query's API and architecture is oriented around declaring API endpoints up front. This lends itself well to automatically generating API slice definitions from external API schema definitions, such as OpenAPI and GraphQL."),(0,i.kt)("p",null,"We have early previews of code generation capabilities available as separate tools."),(0,i.kt)("h2",{id:"graphql"},"GraphQL"),(0,i.kt)("p",null,"We provide a ",(0,i.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/docs/plugins/typescript-rtk-query"},"Plugin for GraphQL Codegen"),". You can find the documentation to that on the graphql-codegen homepage."),(0,i.kt)("p",null,"For a full example on how to use it, you can see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-toolkit/tree/master/examples/query/react/graphql-codegen"},"this example project"),"."),(0,i.kt)("h2",{id:"openapi"},"OpenAPI"),(0,i.kt)("p",null,"We provide a package for RTK Query code generation from OpenAPI schemas. It is published as ",(0,i.kt)("inlineCode",{parentName:"p"},"@rtk-query/codegen-openapi")," and you can find the source code at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-toolkit/tree/master/packages/rtk-query-codegen-openapi"},(0,i.kt)("inlineCode",{parentName:"a"},"packages/rtk-query-codegen-openapi")),"."),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Create an empty api using ",(0,i.kt)("inlineCode",{parentName:"p"},"createApi")," like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'no-transpile title="src/store/emptyApi.ts"',"no-transpile":!0,title:'"src/store/emptyApi.ts"'},"// Or from '@reduxjs/toolkit/query' if not using the auto-generated hooks\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\n// initialize an empty api service that we'll inject endpoints into later as needed\nexport const emptySplitApi = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: () => ({}),\n})\n")),(0,i.kt)("p",null,"Generate a config file (json, js or ts) with contents like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'no-transpile title="openapi-config.ts"',"no-transpile":!0,title:'"openapi-config.ts"'},"import type { ConfigFile } from '@rtk-query/codegen-openapi'\n\nconst config: ConfigFile = {\n  schemaFile: 'https://petstore3.swagger.io/api/v3/openapi.json',\n  apiFile: './src/store/emptyApi.ts',\n  apiImport: 'emptySplitApi',\n  outputFile: './src/store/petApi.ts',\n  exportName: 'petApi',\n  hooks: true,\n}\n\nexport default config\n")),(0,i.kt)("p",null,"and then call the code generator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx @rtk-query/codegen-openapi openapi-config.ts\n")),(0,i.kt)("h4",{id:"generating-tags"},"Generating tags"),(0,i.kt)("p",null,"If your OpenAPI specification uses ",(0,i.kt)("a",{parentName:"p",href:"https://swagger.io/docs/specification/grouping-operations-with-tags/"},"tags"),", you can specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"tag")," option to the codegen.",(0,i.kt)("br",{parentName:"p"}),"\n","That will result in all generated endpoints having ",(0,i.kt)("inlineCode",{parentName:"p"},"providesTags"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"invalidatesTags")," declarations for the ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," of their respective operation definition."),(0,i.kt)("p",null,"Note that this will only result in string tags with no ids, so it might lead to scenarios where too much is invalidated and unneccessary requests are made on mutation."),(0,i.kt)("p",null,"In that case it is still recommended to manually specify tags by using ",(0,i.kt)("a",{parentName:"p",href:"/rtk-query/api/created-api/code-splitting"},(0,i.kt)("inlineCode",{parentName:"a"},"enhanceEndpoints"))," on top of the generated api and manually declare ",(0,i.kt)("inlineCode",{parentName:"p"},"providesTags"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"invalidatesTags"),"."),(0,i.kt)("h3",{id:"programmatic-usage"},"Programmatic usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'no-transpile title="src/store/petApi.ts"',"no-transpile":!0,title:'"src/store/petApi.ts"'},"import { generateEndpoints } from '@rtk-query/codegen-openapi'\n\nconst api = await generateEndpoints({\n  apiFile: './fixtures/emptyApi.ts',\n  schemaFile: resolve(__dirname, 'fixtures/petstore.json'),\n  filterEndpoints: ['getPetById', 'addPet'],\n  hooks: true,\n})\n")),(0,i.kt)("h3",{id:"config-file-options"},"Config file options"),(0,i.kt)("h4",{id:"simple-usage"},"Simple usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"interface SimpleUsage {\n  apiFile: string\n  schemaFile: string\n  apiImport?: string\n  exportName?: string\n  argSuffix?: string\n  responseSuffix?: string\n  hooks?:\n    | boolean\n    | { queries: boolean; lazyQueries: boolean; mutations: boolean }\n  tag?: boolean\n  outputFile: string\n  filterEndpoints?:\n    | string\n    | RegExp\n    | EndpointMatcherFunction\n    | Array<string | RegExp | EndpointMatcherFunction>\n  endpointOverrides?: EndpointOverrides[]\n  flattenArg?: boolean\n}\n\nexport type EndpointMatcherFunction = (\n  operationName: string,\n  operationDefinition: OperationDefinition,\n) => boolean\n")),(0,i.kt)("h4",{id:"filtering-endpoints"},"Filtering endpoints"),(0,i.kt)("p",null,"If you only want to include a few endpoints, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"filterEndpoints")," config option to filter your endpoints.\nNote that endpoints are transformed to camel case. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"login_user")," will become ",(0,i.kt)("inlineCode",{parentName:"p"},"loginUser"),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"filterEndpoints")," will be checked against this camel case version of the endpoint."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'no-transpile title="openapi-config.ts"',"no-transpile":!0,title:'"openapi-config.ts"'},"const filteredConfig: ConfigFile = {\n  // ...\n  // should only have endpoints loginUser, placeOrder, getOrderById, deleteOrder\n  filterEndpoints: ['loginUser', /Order/],\n}\n")),(0,i.kt)("h4",{id:"endpoint-overrides"},"Endpoint overrides"),(0,i.kt)("p",null,"If an endpoint is generated as a mutation instead of a query or the other way round, you can override that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'no-transpile title="openapi-config.ts"',"no-transpile":!0,title:'"openapi-config.ts"'},"const withOverride: ConfigFile = {\n  // ...\n  endpointOverrides: [\n    {\n      pattern: 'loginUser',\n      type: 'mutation',\n    },\n  ],\n}\n")),(0,i.kt)("h4",{id:"generating-hooks"},"Generating hooks"),(0,i.kt)("p",null,"Setting ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks: true")," will generate ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"useMutation")," hook exports. If you also want ",(0,i.kt)("inlineCode",{parentName:"p"},"useLazyQuery")," hooks generated or more granular control, you can also pass an object in the shape of: ",(0,i.kt)("inlineCode",{parentName:"p"},"{ queries: boolean; lazyQueries: boolean; mutations: boolean }"),"."),(0,i.kt)("h4",{id:"multiple-output-files"},"Multiple output files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'no-transpile title="openapi-config.ts"',"no-transpile":!0,title:'"openapi-config.ts"'},"const config: ConfigFile = {\n  schemaFile: 'https://petstore3.swagger.io/api/v3/openapi.json',\n  apiFile: './src/store/emptyApi.ts',\n  outputFiles: {\n    './src/store/user.ts': {\n      filterEndpoints: [/user/i],\n    },\n    './src/store/order.ts': {\n      filterEndpoints: [/order/i],\n    },\n    './src/store/pet.ts': {\n      filterEndpoints: [/pet/i],\n    },\n  },\n}\n")))}g.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=a,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);