"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2024],{3411:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(7378),r=a(7140),s="tabItem_wHwb";function i(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:a},t)}},2453:function(e,t,a){a.d(t,{Z:function(){return h}});var n=a(2685),r=a(7378),s=a(7140),i=a(362),o=a(56),l=a(5720),c=a(9169),d="tabList_J5MA",u="tabItem_l0OV";function p(e){var t,a,i=e.lazy,p=e.block,h=e.defaultValue,m=e.values,g=e.groupId,f=e.className,y=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,o.l)(v,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===h?h:null!=(t=null!=h?h:null==(a=y.find((function(e){return e.props.default})))?void 0:a.props.value)?t:y[0].props.value;if(null!==w&&!v.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,l.U)(),N=k.tabGroupChoices,x=k.setTabGroupChoices,C=(0,r.useState)(w),E=C[0],A=C[1],T=[],q=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var S=N[g];null!=S&&S!==E&&v.some((function(e){return e.value===S}))&&A(S)}var O=function(e){var t=e.currentTarget,a=T.indexOf(t),n=v[a].value;n!==E&&(q(t),A(n),null!=g&&x(g,String(n)))},D=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,r=T.indexOf(e.currentTarget)+1;a=null!=(n=T[r])?n:T[0];break;case"ArrowLeft":var s,i=T.indexOf(e.currentTarget)-1;a=null!=(s=T[i])?s:T[T.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":p},f)},v.map((function(e){var t=e.value,a=e.label,i=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return T.push(e)},onKeyDown:D,onFocus:O,onClick:O},i,{className:(0,s.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":E===t})}),null!=a?a:t)}))),i?(0,r.cloneElement)(y.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function h(e){var t=(0,i.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},870:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return h}});var n=a(2685),r=a(1244),s=(a(7378),a(5318)),i=a(3411),o=a(2453),l=["components"],c={id:"streaming-updates",title:"Streaming Updates",sidebar_label:"Streaming Updates",hide_title:!0,description:"RTK Query > Usage > Streaming Updates: updating cache from pushed messages"},d=void 0,u={unversionedId:"rtk-query/usage/streaming-updates",id:"rtk-query/usage/streaming-updates",title:"Streaming Updates",description:"RTK Query > Usage > Streaming Updates: updating cache from pushed messages",source:"@site/../docs/rtk-query/usage/streaming-updates.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/streaming-updates",permalink:"/rtk-query/usage/streaming-updates",draft:!1,tags:[],version:"current",lastUpdatedAt:1716195420,formattedLastUpdatedAt:"May 20, 2024",frontMatter:{id:"streaming-updates",title:"Streaming Updates",sidebar_label:"Streaming Updates",hide_title:!0,description:"RTK Query > Usage > Streaming Updates: updating cache from pushed messages"},sidebar:"docs",previous:{title:"Polling",permalink:"/rtk-query/usage/polling"},next:{title:"Code Splitting",permalink:"/rtk-query/usage/code-splitting"}},p={},h=[{value:"Overview",id:"overview",level:2},{value:"When to use streaming updates",id:"when-to-use-streaming-updates",level:2},{value:"Using the <code>onCacheEntryAdded</code> Lifecycle",id:"using-the-oncacheentryadded-lifecycle",level:2},{value:"Streaming Update Examples",id:"streaming-update-examples",level:2},{value:"Websocket Chat API",id:"websocket-chat-api",level:3},{value:"What to expect",id:"what-to-expect",level:4},{value:"Websocket Chat API with a transformed response shape",id:"websocket-chat-api-with-a-transformed-response-shape",level:3}],m={toc:h};function g(e){var t=e.components,a=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"streaming-updates"},"Streaming Updates"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"RTK Query gives you the ability to receive ",(0,s.kt)("strong",{parentName:"p"},"streaming updates")," for persistent queries. This enables a query to establish an ongoing connection to the server (typically using WebSockets), and apply updates to the cached data as additional information is received from the server."),(0,s.kt)("p",null,"Streaming updates can be used to enable the API to receive real-time updates to the back-end data, such as new entries being created, or important properties being updated."),(0,s.kt)("p",null,"To enable streaming updates for a query, pass the asynchronous ",(0,s.kt)("inlineCode",{parentName:"p"},"onCacheEntryAdded")," function to the query, including the logic for how to update the query when streamed data is received. See ",(0,s.kt)("a",{parentName:"p",href:"../api/createApi#oncacheentryadded"},(0,s.kt)("inlineCode",{parentName:"a"},"onCacheEntryAdded")," API reference")," for more details."),(0,s.kt)("h2",{id:"when-to-use-streaming-updates"},"When to use streaming updates"),(0,s.kt)("p",null,"Primarily updates to query data should be done via ",(0,s.kt)("a",{parentName:"p",href:"./polling"},(0,s.kt)("inlineCode",{parentName:"a"},"polling"))," intermittently on an interval, using ",(0,s.kt)("a",{parentName:"p",href:"./automated-refetching#advanced-invalidation-with-abstract-tag-ids"},(0,s.kt)("inlineCode",{parentName:"a"},"cache invalidation"))," to invalidate data based on tags associated with queries & mutations, or with ",(0,s.kt)("a",{parentName:"p",href:"../api/createApi#refetchonmountorargchange"},(0,s.kt)("inlineCode",{parentName:"a"},"refetchOnMountOrArgChange"))," to fetch fresh data when a component using the data mounts."),(0,s.kt)("p",null,"However, streaming updates is particularly useful for scenarios involving:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Small, frequent changes to large objects"),". Rather than repeatedly polling for a large object, the object can be fetched with an initial query, and streaming updates can update individual properties as updates are received."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"External event-driven updates"),". Where data may be changed by the server or otherwise external users and where real-time updates are expected to be shown to an active user, polling alone would result in periods of stale data in between queries, causing state to easily get out of sync. Streaming updates can update all active clients as the updates occur rather than waiting for the next interval to elapse.")),(0,s.kt)("p",null,"Example use cases that benefit from streaming updates are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"GraphQL subscriptions"),(0,s.kt)("li",{parentName:"ul"},"Real-time chat applications"),(0,s.kt)("li",{parentName:"ul"},"Real-time multiplayer games"),(0,s.kt)("li",{parentName:"ul"},"Collaborative document editing with multiple concurrent users")),(0,s.kt)("h2",{id:"using-the-oncacheentryadded-lifecycle"},"Using the ",(0,s.kt)("inlineCode",{parentName:"h2"},"onCacheEntryAdded")," Lifecycle"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"onCacheEntryAdded")," lifecycle callback lets you write arbitrary async logic that will be executed after a new cache entry is added to the RTK Query cache (ie, after a component has created a new subscription to a given endpoint+params combination)."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"onCacheEntryAdded")," will be called with two arguments: the ",(0,s.kt)("inlineCode",{parentName:"p"},"arg"),' that was passed to the subscription, and an options object containing "lifecycle promises" and utility functions. You can use these to write sequenced logic that waits for data to be added, initiates server connections, applies partial updates, and cleans up the connection when the query subscription is removed.'),(0,s.kt)("p",null,"Typically, you will ",(0,s.kt)("inlineCode",{parentName:"p"},"await cacheDataLoaded")," to determine when the first data has been fetched, then use the ",(0,s.kt)("inlineCode",{parentName:"p"},"updateCacheData")," utility to apply streaming updates as messages are received. ",(0,s.kt)("inlineCode",{parentName:"p"},"updateCacheData")," is an Immer-powered callback that receives a ",(0,s.kt)("inlineCode",{parentName:"p"},"draft"),' of the current cache value. You may "mutate" the draft value to update it as needed based on the received values. RTK Query will then dispatch an action that applies a diffed patch based on those changes.'),(0,s.kt)("p",null,"Finally, you can ",(0,s.kt)("inlineCode",{parentName:"p"},"await cacheEntryRemoved")," to know when to clean up any server connections."),(0,s.kt)("h2",{id:"streaming-update-examples"},"Streaming Update Examples"),(0,s.kt)("h3",{id:"websocket-chat-api"},"Websocket Chat API"),(0,s.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { isMessage } from './schemaValidators'\n\nexport type Channel = 'redux' | 'general'\n\nexport interface Message {\n  id: number\n  channel: Channel\n  userName: string\n  text: string\n}\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    getMessages: build.query<Message[], Channel>({\n      query: (channel) => `messages/${channel}`,\n      // highlight-start\n      async onCacheEntryAdded(\n        arg,\n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n        // create a websocket connection when the cache subscription starts\n        const ws = new WebSocket('ws://localhost:8080')\n        try {\n          // wait for the initial query to resolve before proceeding\n          await cacheDataLoaded\n\n          // when data is received from the socket connection to the server,\n          // if it is a message and for the appropriate channel,\n          // update our query result with the received message\n          const listener = (event: MessageEvent) => {\n            const data = JSON.parse(event.data)\n            if (!isMessage(data) || data.channel !== arg) return\n\n            updateCachedData((draft) => {\n              draft.push(data)\n            })\n          }\n\n          ws.addEventListener('message', listener)\n        } catch {\n          // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\n          // in which case `cacheDataLoaded` will throw\n        }\n        // cacheEntryRemoved will resolve when the cache subscription is no longer active\n        await cacheEntryRemoved\n        // perform cleanup steps once the `cacheEntryRemoved` promise resolves\n        ws.close()\n      },\n      // highlight-end\n    }),\n  }),\n})\n\nexport const { useGetMessagesQuery } = api\n"))),(0,s.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { isMessage } from './schemaValidators'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    getMessages: build.query({\n      query: (channel) => `messages/${channel}`,\n      // highlight-start\n      async onCacheEntryAdded(\n        arg,\n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n        // create a websocket connection when the cache subscription starts\n        const ws = new WebSocket('ws://localhost:8080')\n        try {\n          // wait for the initial query to resolve before proceeding\n          await cacheDataLoaded\n\n          // when data is received from the socket connection to the server,\n          // if it is a message and for the appropriate channel,\n          // update our query result with the received message\n          const listener = (event) => {\n            const data = JSON.parse(event.data)\n            if (!isMessage(data) || data.channel !== arg) return\n\n            updateCachedData((draft) => {\n              draft.push(data)\n            })\n          }\n\n          ws.addEventListener('message', listener)\n        } catch {\n          // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\n          // in which case `cacheDataLoaded` will throw\n        }\n        // cacheEntryRemoved will resolve when the cache subscription is no longer active\n        await cacheEntryRemoved\n        // perform cleanup steps once the `cacheEntryRemoved` promise resolves\n        ws.close()\n      },\n      // highlight-end\n    }),\n  }),\n})\n\nexport const { useGetMessagesQuery } = api\n")))),(0,s.kt)("h4",{id:"what-to-expect"},"What to expect"),(0,s.kt)("p",null,"When the ",(0,s.kt)("inlineCode",{parentName:"p"},"getMessages")," query is triggered (e.g. via a component mounting with the ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetMessagesQuery()")," hook), a ",(0,s.kt)("inlineCode",{parentName:"p"},"cache entry")," will be added based on the serialized arguments for the endpoint. The associated query will be fired off based on the ",(0,s.kt)("inlineCode",{parentName:"p"},"query")," property to fetch the initial data for the cache. Meanwhile, the asynchronous ",(0,s.kt)("inlineCode",{parentName:"p"},"onCacheEntryAdded")," callback will begin, and create a new WebSocket connection. Once the response for the initial query is received, the cache will be populated with the response data, and the ",(0,s.kt)("inlineCode",{parentName:"p"},"cacheDataLoaded")," promise will resolve. After awaiting the ",(0,s.kt)("inlineCode",{parentName:"p"},"cacheDataLoaded")," promise, the ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," event listener will be added to the WebSocket connection, which updates the cache data when an associated message is received."),(0,s.kt)("p",null,"When there are no more active subscriptions to the data (e.g. when the subscribed components remain unmounted for a sufficient amount of time), the ",(0,s.kt)("inlineCode",{parentName:"p"},"cacheEntryRemoved")," promise will resolve, allowing the remaining code to run and close the websocket connection. RTK Query will also remove the associated data from the cache."),(0,s.kt)("p",null,"If a query for the corresponding cache entry runs later, it will overwrite the whole cache entry, and the streaming update listeners will continue to work on the updated data."),(0,s.kt)("h3",{id:"websocket-chat-api-with-a-transformed-response-shape"},"Websocket Chat API with a transformed response shape"),(0,s.kt)(o.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { createEntityAdapter } from '@reduxjs/toolkit'\nimport type { EntityState } from '@reduxjs/toolkit'\nimport { isMessage } from './schemaValidators'\n\nexport type Channel = 'redux' | 'general'\n\nexport interface Message {\n  id: number\n  channel: Channel\n  userName: string\n  text: string\n}\n\n// highlight-start\nconst messagesAdapter = createEntityAdapter<Message>()\n// highlight-end\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    getMessages: build.query<EntityState<Message, number>, Channel>({\n      // highlight-end\n      query: (channel) => `messages/${channel}`,\n      // highlight-start\n      transformResponse(response: Message[]) {\n        return messagesAdapter.addMany(\n          messagesAdapter.getInitialState(),\n          response\n        )\n      },\n      // highlight-end\n      async onCacheEntryAdded(\n        arg,\n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n        const ws = new WebSocket('ws://localhost:8080')\n        try {\n          await cacheDataLoaded\n\n          const listener = (event: MessageEvent) => {\n            const data = JSON.parse(event.data)\n            if (!isMessage(data) || data.channel !== arg) return\n\n            updateCachedData((draft) => {\n              // highlight-start\n              messagesAdapter.upsertOne(draft, data)\n              // highlight-end\n            })\n          }\n\n          ws.addEventListener('message', listener)\n        } catch {}\n        await cacheEntryRemoved\n        ws.close()\n      },\n    }),\n  }),\n})\n\nexport const { useGetMessagesQuery } = api\n"))),(0,s.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { createEntityAdapter } from '@reduxjs/toolkit'\nimport { isMessage } from './schemaValidators'\n\n// highlight-start\nconst messagesAdapter = createEntityAdapter()\n// highlight-end\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (build) => ({\n    // highlight-start\n    getMessages: build.query({\n      // highlight-end\n      query: (channel) => `messages/${channel}`,\n      // highlight-start\n      transformResponse(response) {\n        return messagesAdapter.addMany(\n          messagesAdapter.getInitialState(),\n          response\n        )\n      },\n      // highlight-end\n      async onCacheEntryAdded(\n        arg,\n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved }\n      ) {\n        const ws = new WebSocket('ws://localhost:8080')\n        try {\n          await cacheDataLoaded\n\n          const listener = (event) => {\n            const data = JSON.parse(event.data)\n            if (!isMessage(data) || data.channel !== arg) return\n\n            updateCachedData((draft) => {\n              // highlight-start\n              messagesAdapter.upsertOne(draft, data)\n              // highlight-end\n            })\n          }\n\n          ws.addEventListener('message', listener)\n        } catch {}\n        await cacheEntryRemoved\n        ws.close()\n      },\n    }),\n  }),\n})\n\nexport const { useGetMessagesQuery } = api\n")))),(0,s.kt)("p",null,"This example demonstrates how the ",(0,s.kt)("a",{parentName:"p",href:"#websocket-chat-api"},"previous example")," can be altered to allow for transforming the response shape when adding data to the cache."),(0,s.kt)("p",null,"For example, the data is transformed from this shape:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"[\n  {\n    id: 0\n    channel: 'redux'\n    userName: 'Mark'\n    text: 'Welcome to #redux!'\n  },\n  {\n    id: 1\n    channel: 'redux'\n    userName: 'Lenz'\n    text: 'Glad to be here!'\n  },\n]\n")),(0,s.kt)("p",null,"To this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},'{\n  // The unique IDs of each item. Must be strings or numbers\n  ids: [0, 1],\n  // A lookup table mapping entity IDs to the corresponding entity objects\n  entities: {\n    0: {\n      id: 0,\n      channel: "redux",\n      userName: "Mark",\n      text: "Welcome to #redux!",\n    },\n    1: {\n      id: 1,\n      channel: "redux",\n      userName: "Lenz",\n      text: "Glad to be here!",\n    },\n  },\n};\n')),(0,s.kt)("p",null,"A key point to keep in mind is that updates to the cached data within the ",(0,s.kt)("inlineCode",{parentName:"p"},"onCacheEntryAdded")," callback must respect the transformed data shape which will be present for the cached data. The example shows how ",(0,s.kt)("a",{parentName:"p",href:"../../api/createEntityAdapter"},(0,s.kt)("inlineCode",{parentName:"a"},"createEntityAdapter"))," can be used for the initial ",(0,s.kt)("inlineCode",{parentName:"p"},"transformResponse"),", and again when streamed updates are received to upsert received items into the cached data, while maintaining the normalized state structure."))}g.isMDXComponent=!0},5318:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(a),h=r,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||s;return a?n.createElement(m,i(i({ref:t},d),{},{components:a})):n.createElement(m,i({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);