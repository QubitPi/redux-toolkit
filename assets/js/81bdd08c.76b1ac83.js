"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7592],{3411:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7378),r=n(7140),o="tabItem_wHwb";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},2453:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(2685),r=n(7378),o=n(7140),i=n(362),c=n(56),l=n(5720),s=n(9169),u="tabList_J5MA",p="tabItem_l0OV";function d(e){var t,n,i=e.lazy,d=e.block,m=e.defaultValue,h=e.values,y=e.groupId,f=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=h?h:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,c.l)(g,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===m?m:null!=(t=null!=m?m:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),T=N.tabGroupChoices,w=N.setTabGroupChoices,x=(0,r.useState)(v),A=x[0],C=x[1],j=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var S=T[y];null!=S&&S!==A&&g.some((function(e){return e.value===S}))&&C(S)}var I=function(e){var t=e.currentTarget,n=j.indexOf(t),a=g[n].value;a!==A&&(E(t),C(a),null!=y&&w(y,String(a)))},R=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=j.indexOf(e.currentTarget)+1;n=null!=(a=j[r])?a:j[0];break;case"ArrowLeft":var o,i=j.indexOf(e.currentTarget)-1;n=null!=(o=j[i])?o:j[j.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},f)},g.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===t?0:-1,"aria-selected":A===t,key:t,ref:function(e){return j.push(e)},onKeyDown:R,onFocus:I,onClick:I},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":A===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(b.filter((function(e){return e.props.value===A}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==A})}))))}function m(e){var t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},449:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var a=n(2685),r=n(1244),o=(n(7378),n(5318)),i=n(3411),c=n(2453),l=["components"],s={id:"createAction",title:"createAction",sidebar_label:"createAction",hide_title:!0},u=void 0,p={unversionedId:"api/createAction",id:"api/createAction",title:"createAction",description:"&nbsp;",source:"@site/../docs/api/createAction.mdx",sourceDirName:"api",slug:"/api/createAction",permalink:"/redux-toolkit/api/createAction",draft:!1,tags:[],version:"current",lastUpdatedAt:1681260993,formattedLastUpdatedAt:"Apr 12, 2023",frontMatter:{id:"createAction",title:"createAction",sidebar_label:"createAction",hide_title:!0},sidebar:"docs",previous:{title:"createReducer",permalink:"/redux-toolkit/api/createReducer"},next:{title:"createSlice",permalink:"/redux-toolkit/api/createSlice"}},d={},m=[{value:"Using Prepare Callbacks to Customize Action Contents",id:"using-prepare-callbacks-to-customize-action-contents",level:2},{value:"Usage with createReducer()",id:"usage-with-createreducer",level:2},{value:"Non-String Action Types",id:"non-string-action-types",level:2},{value:"actionCreator.match",id:"actioncreatormatch",level:2},{value:"As a TypeScript Type Guard",id:"as-a-typescript-type-guard",level:3},{value:"With redux-observable",id:"with-redux-observable",level:3}],h={toc:m};function y(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"createaction"},(0,o.kt)("inlineCode",{parentName:"h1"},"createAction")),(0,o.kt)("p",null,"A helper function for defining a Redux ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/basics/actions"},"action")," type and creator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function createAction(type, prepareAction?)\n")),(0,o.kt)("p",null,"The usual way to define an action in Redux is to separately declare an ",(0,o.kt)("em",{parentName:"p"},"action type")," constant and an ",(0,o.kt)("em",{parentName:"p"},"action creator")," function for constructing actions of that type."),(0,o.kt)(c.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const INCREMENT = 'counter/increment'\n\nfunction increment(amount: number) {\n  return {\n    type: INCREMENT,\n    payload: amount,\n  }\n}\n\nconst action = increment(3)\n// { type: 'counter/increment', payload: 3 }\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const INCREMENT = 'counter/increment'\n\nfunction increment(amount) {\n  return {\n    type: INCREMENT,\n    payload: amount,\n  }\n}\n\nconst action = increment(3)\n// { type: 'counter/increment', payload: 3 }\n")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction")," helper combines these two declarations into one. It takes an action type and returns an action creator for that type. The action creator can be called either without arguments or with a ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," to be attached to the action. Also, the action creator overrides ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"},"toString()")," so that the action type becomes its string representation."),(0,o.kt)(c.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction } from '@reduxjs/toolkit'\n\nconst increment = createAction<number | undefined>('counter/increment')\n\nlet action = increment()\n// { type: 'counter/increment' }\n\naction = increment(3)\n// returns { type: 'counter/increment', payload: 3 }\n\nconsole.log(increment.toString())\n// 'counter/increment'\n\nconsole.log(`The action type is: ${increment}`)\n// 'The action type is: counter/increment'\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createAction } from '@reduxjs/toolkit'\n\nconst increment = createAction('counter/increment')\n\nlet action = increment()\n// { type: 'counter/increment' }\n\naction = increment(3)\n// returns { type: 'counter/increment', payload: 3 }\n\nconsole.log(increment.toString())\n// 'counter/increment'\n\nconsole.log(`The action type is: ${increment}`)\n// 'The action type is: counter/increment'\n")))),(0,o.kt)("h2",{id:"using-prepare-callbacks-to-customize-action-contents"},"Using Prepare Callbacks to Customize Action Contents"),(0,o.kt)("p",null,"By default, the generated action creators accept a single argument, which becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"action.payload"),". This requires the caller to construct the entire payload correctly and pass it in."),(0,o.kt)("p",null,"In many cases, you may want to write additional logic to customize the creation of the ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," value, such as accepting multiple parameters for the action creator, generating a random ID, or getting the current timestamp. To do this, ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction"),' accepts an optional second argument: a "prepare callback" that will be used to construct the payload value.'),(0,o.kt)(c.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction, nanoid } from '@reduxjs/toolkit'\n\nconst addTodo = createAction('todos/add', function prepare(text: string) {\n  return {\n    payload: {\n      text,\n      id: nanoid(),\n      createdAt: new Date().toISOString(),\n    },\n  }\n})\n\nconsole.log(addTodo('Write more docs'))\n/**\n * {\n *   type: 'todos/add',\n *   payload: {\n *     text: 'Write more docs',\n *     id: '4AJvwMSWEHCchcWYga3dj',\n *     createdAt: '2019-10-03T07:53:36.581Z'\n *   }\n * }\n **/\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createAction, nanoid } from '@reduxjs/toolkit'\n\nconst addTodo = createAction('todos/add', function prepare(text) {\n  return {\n    payload: {\n      text,\n      id: nanoid(),\n      createdAt: new Date().toISOString(),\n    },\n  }\n})\n\nconsole.log(addTodo('Write more docs'))\n/**\n * {\n *   type: 'todos/add',\n *   payload: {\n *     text: 'Write more docs',\n *     id: '4AJvwMSWEHCchcWYga3dj',\n *     createdAt: '2019-10-03T07:53:36.581Z'\n *   }\n * }\n **/\n")))),(0,o.kt)("p",null,"If provided, all arguments from the action creator will be passed to the prepare callback, and it should return an object with the ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," field (otherwise the payload of created actions will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"). Additionally, the object can have a ",(0,o.kt)("inlineCode",{parentName:"p"},"meta")," and/or an ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," field that will also be added to created actions. ",(0,o.kt)("inlineCode",{parentName:"p"},"meta")," may contain extra information about the action, ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," may contain details about the action failure. These three fields (",(0,o.kt)("inlineCode",{parentName:"p"},"payload"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"meta")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),") adhere to the specification of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redux-utilities/flux-standard-action#actions"},"Flux Standard Actions"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," The type field will be added automatically."),(0,o.kt)("h2",{id:"usage-with-createreducer"},"Usage with createReducer()"),(0,o.kt)("p",null,"Because of their ",(0,o.kt)("inlineCode",{parentName:"p"},"toString()")," override, action creators returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction()")," can be used directly as keys for the case reducers passed to ",(0,o.kt)("a",{parentName:"p",href:"/redux-toolkit/api/createReducer"},"createReducer()"),"."),(0,o.kt)(c.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction, createReducer } from '@reduxjs/toolkit'\n\nconst increment = createAction<number>('counter/increment')\nconst decrement = createAction<number>('counter/decrement')\n\nconst counterReducer = createReducer(0, (builder) => {\n  builder.addCase(increment, (state, action) => state + action.payload)\n  builder.addCase(decrement, (state, action) => state - action.payload)\n})\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createAction, createReducer } from '@reduxjs/toolkit'\n\nconst increment = createAction('counter/increment')\nconst decrement = createAction('counter/decrement')\n\nconst counterReducer = createReducer(0, (builder) => {\n  builder.addCase(increment, (state, action) => state + action.payload)\n  builder.addCase(decrement, (state, action) => state - action.payload)\n})\n")))),(0,o.kt)("h2",{id:"non-string-action-types"},"Non-String Action Types"),(0,o.kt)("p",null,"In principle, Redux lets you use any kind of value as an action type. Instead of strings, you could theoretically use numbers, ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Symbol"},"symbols"),", or anything else (",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants"},"although it's recommended that the value should at least be serializable"),")."),(0,o.kt)("p",null,"However, Redux Toolkit rests on the assumption that you use string action types. Specifically, some of its features rely on the fact that with strings, the ",(0,o.kt)("inlineCode",{parentName:"p"},"toString()")," method of an ",(0,o.kt)("inlineCode",{parentName:"p"},"createAction()")," action creator returns the matching action type. This is not the case for non-string action types because ",(0,o.kt)("inlineCode",{parentName:"p"},"toString()")," will return the string-converted type value rather than the type itself."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const INCREMENT = Symbol('increment')\nconst increment = createAction(INCREMENT)\n\nincrement.toString()\n// returns the string 'Symbol(increment)',\n// not the INCREMENT symbol itself\n\nincrement.toString() === INCREMENT\n// false\n")),(0,o.kt)("p",null,"This means that, for instance, you cannot use a non-string-type action creator as a case reducer key for ",(0,o.kt)("a",{parentName:"p",href:"/redux-toolkit/api/createReducer"},"createReducer()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const INCREMENT = Symbol('increment')\nconst increment = createAction(INCREMENT)\n\nconst counterReducer = createReducer(0, {\n  // The following case reducer will NOT trigger for\n  // increment() actions because `increment` will be\n  // interpreted as a string, rather than being evaluated\n  // to the INCREMENT symbol.\n  [increment]: (state, action) => state + action.payload,\n\n  // You would need to use the action type explicitly instead.\n  [INCREMENT]: (state, action) => state + action.payload,\n})\n")),(0,o.kt)("p",null,"For this reason, ",(0,o.kt)("strong",{parentName:"p"},"we strongly recommend you to only use string action types"),"."),(0,o.kt)("h2",{id:"actioncreatormatch"},"actionCreator.match"),(0,o.kt)("p",null,"Every generated actionCreator has a ",(0,o.kt)("inlineCode",{parentName:"p"},".match(action)")," method that can be used to determine if the passed action is of the same type as an action that would be created by the action creator."),(0,o.kt)("p",null,"This has different uses:"),(0,o.kt)("h3",{id:"as-a-typescript-type-guard"},"As a TypeScript Type Guard"),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"match")," method is a ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"},"TypeScript type guard")," and can be used to discriminate the ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," type of an action."),(0,o.kt)("p",null,"This behavior can be particularly useful when used in custom middlewares, where manual casts might be neccessary otherwise."),(0,o.kt)(c.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction } from '@reduxjs/toolkit'\nimport type { Action } from '@reduxjs/toolkit'\n\nconst increment = createAction<number>('INCREMENT')\n\nfunction someFunction(action: Action) {\n  // accessing action.payload would result in an error here\n  if (increment.match(action)) {\n    // action.payload can be used as `number` here\n  }\n}\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createAction } from '@reduxjs/toolkit'\n\nconst increment = createAction('INCREMENT')\n\nfunction someFunction(action) {\n  // accessing action.payload would result in an error here\n  if (increment.match(action)) {\n    // action.payload can be used as `number` here\n  }\n}\n")))),(0,o.kt)("h3",{id:"with-redux-observable"},"With redux-observable"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"match")," method can also be used as a filter method, which makes it powerful when used with redux-observable:"),(0,o.kt)(c.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createAction } from '@reduxjs/toolkit'\nimport type { Action } from '@reduxjs/toolkit'\nimport type { Observable } from 'rxjs'\nimport { map, filter } from 'rxjs/operators'\n\nconst increment = createAction<number>('INCREMENT')\n\nexport const epic = (actions$: Observable<Action>) =>\n  actions$.pipe(\n    filter(increment.match),\n    map((action) => {\n      // action.payload can be safely used as number here (and will also be correctly inferred by TypeScript)\n      // ...\n    })\n  )\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createAction } from '@reduxjs/toolkit'\nimport { map, filter } from 'rxjs/operators'\n\nconst increment = createAction('INCREMENT')\n\nexport const epic = (actions$) =>\n  actions$.pipe(\n    filter(increment.match),\n    map((action) => {\n      // action.payload can be safely used as number here (and will also be correctly inferred by TypeScript)\n      // ...\n    })\n  )\n")))))}y.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);