"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4543],{3411:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7378),r=n(7140),i="tabItem_wHwb";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},2453:function(e,t,n){n.d(t,{Z:function(){return h}});var a=n(2685),r=n(7378),i=n(7140),o=n(362),s=n(56),l=n(5720),u=n(9169),d="tabList_J5MA",p="tabItem_l0OV";function c(e){var t,n,o=e.lazy,c=e.block,h=e.defaultValue,m=e.values,f=e.groupId,y=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,s.l)(g,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===h?h:null!=(t=null!=h?h:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:k[0].props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),q=N.tabGroupChoices,w=N.setTabGroupChoices,C=(0,r.useState)(v),Q=C[0],x=C[1],T=[],P=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var A=q[f];null!=A&&A!==Q&&g.some((function(e){return e.value===A}))&&x(A)}var R=function(e){var t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==Q&&(P(t),x(a),null!=f&&w(f,String(a)))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=T.indexOf(e.currentTarget)+1;n=null!=(a=T[r])?a:T[0];break;case"ArrowLeft":var i,o=T.indexOf(e.currentTarget)-1;n=null!=(i=T[o])?i:T[T.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},y)},g.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:Q===t?0:-1,"aria-selected":Q===t,key:t,ref:function(e){return T.push(e)},onKeyDown:E,onFocus:R,onClick:R},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":Q===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(k.filter((function(e){return e.props.value===Q}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==Q})}))))}function h(e){var t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},3218:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return h}});var a=n(2685),r=n(1244),i=(n(7378),n(5318)),o=n(3411),s=n(2453),l=["components"],u={id:"queries",title:"Queries",sidebar_label:"Queries",hide_title:!0,description:"RTK Query > Usage > Queries: fetching data from a server"},d=void 0,p={unversionedId:"rtk-query/usage/queries",id:"rtk-query/usage/queries",title:"Queries",description:"RTK Query > Usage > Queries: fetching data from a server",source:"@site/../docs/rtk-query/usage/queries.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/queries",permalink:"/rtk-query/usage/queries",draft:!1,tags:[],version:"current",lastUpdatedAt:1716195420,formattedLastUpdatedAt:"May 20, 2024",frontMatter:{id:"queries",title:"Queries",sidebar_label:"Queries",hide_title:!0,description:"RTK Query > Usage > Queries: fetching data from a server"},sidebar:"docs",previous:{title:"Usage With TypeScript",permalink:"/rtk-query/usage-with-typescript"},next:{title:"Mutations",permalink:"/rtk-query/usage/mutations"}},c={},h=[{value:"Overview",id:"overview",level:2},{value:"Defining Query Endpoints",id:"defining-query-endpoints",level:2},{value:"Performing Queries with React Hooks",id:"performing-queries-with-react-hooks",level:2},{value:"Hook types",id:"hook-types",level:3},{value:"Query Hook Options",id:"query-hook-options",level:3},{value:"Frequently Used Query Hook Return Values",id:"frequently-used-query-hook-return-values",level:3},{value:"Query Hook Usage Example",id:"query-hook-usage-example",level:3},{value:"Query Loading State",id:"query-loading-state",level:3},{value:"Query Cache Keys",id:"query-cache-keys",level:3},{value:"Selecting data from a query result",id:"selecting-data-from-a-query-result",level:3},{value:"Avoiding unnecessary requests",id:"avoiding-unnecessary-requests",level:3},{value:"Example: Observing caching behavior",id:"example-observing-caching-behavior",level:2}],m={toc:h};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"queries"},"Queries"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"This is the most common use case for RTK Query. A query operation can be performed with any data fetching library of your choice, but the general recommendation is that you only use queries for requests that retrieve data. For anything that alters data on the server or will possibly invalidate the cache, you should use a ",(0,i.kt)("a",{parentName:"p",href:"./mutations"},"Mutation"),"."),(0,i.kt)("p",null,"By default, RTK Query ships with ",(0,i.kt)("a",{parentName:"p",href:"../api/fetchBaseQuery"},(0,i.kt)("inlineCode",{parentName:"a"},"fetchBaseQuery")),", which is a lightweight ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},(0,i.kt)("inlineCode",{parentName:"a"},"fetch"))," wrapper that automatically handles request headers and response parsing in a manner similar to common libraries like ",(0,i.kt)("inlineCode",{parentName:"p"},"axios"),". See ",(0,i.kt)("a",{parentName:"p",href:"./customizing-queries"},"Customizing Queries")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchBaseQuery")," does not handle your requirements."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Depending on your environment, you may need to polyfill ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"node-fetch")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"cross-fetch")," if you choose to use ",(0,i.kt)("inlineCode",{parentName:"p"},"fetchBaseQuery")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," on its own.")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/rtk-query/api/created-api/hooks#usequery"},(0,i.kt)("inlineCode",{parentName:"a"},"useQuery"))," for the hook signature and additional details."),(0,i.kt)("h2",{id:"defining-query-endpoints"},"Defining Query Endpoints"),(0,i.kt)("p",null,"Query endpoints are defined by returning an object inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoints")," section of ",(0,i.kt)("inlineCode",{parentName:"p"},"createApi"),", and defining the fields using the ",(0,i.kt)("inlineCode",{parentName:"p"},"builder.query()")," method."),(0,i.kt)("p",null,"Query endpoints should define either a ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," callback that constructs the URL (including any URL query params), or ",(0,i.kt)("a",{parentName:"p",href:"/rtk-query/usage/customizing-queries#customizing-queries-with-queryfn"},"a ",(0,i.kt)("inlineCode",{parentName:"a"},"queryFn")," callback")," that may do arbitrary async logic and return a result."),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),' callback needs additional data to generate the URL, it should be written to take a single argument. If you need to pass in multiple parameters, pass them formatted as a single "options object".'),(0,i.kt)("p",null,'Query endpoints may also modify the response contents before the result is cached, define "tags" to identify cache invalidation, and provide cache entry lifecycle callbacks to run additional logic as cache entries are added and removed.'),(0,i.kt)("p",null,"When used with TypeScript, you should supply generics for the return type and the expected query argument: ",(0,i.kt)("inlineCode",{parentName:"p"},"build.query<ReturnType, ArgType>"),". If there is no argument, use ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," for the arg type instead."),(0,i.kt)(s.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example of all query endpoint options"',title:'"Example',of:!0,all:!0,query:!0,endpoint:!0,'options"':!0},"// Or from '@reduxjs/toolkit/query/react'\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\nimport type { Post } from './types'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    // highlight-start\n    // The query accepts a number and returns a Post\n    getPost: build.query<Post, number>({\n      // note: an optional `queryFn` may be used in place of `query`\n      query: (id) => ({ url: `post/${id}` }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response: { data: Post }, meta, arg) => response.data,\n      // Pick out errors and prevent nested properties in a hook or selector\n      transformErrorResponse: (\n        response: { status: string | number },\n        meta,\n        arg\n      ) => response.status,\n      providesTags: (result, error, id) => [{ type: 'Post', id }],\n      // The 2nd parameter is the destructured `QueryLifecycleApi`\n      async onQueryStarted(\n        arg,\n        {\n          dispatch,\n          getState,\n          extra,\n          requestId,\n          queryFulfilled,\n          getCacheEntry,\n          updateCachedData,\n        }\n      ) {},\n      // The 2nd parameter is the destructured `QueryCacheLifecycleApi`\n      async onCacheEntryAdded(\n        arg,\n        {\n          dispatch,\n          getState,\n          extra,\n          requestId,\n          cacheEntryRemoved,\n          cacheDataLoaded,\n          getCacheEntry,\n          updateCachedData,\n        }\n      ) {},\n      // highlight-end\n    }),\n  }),\n})\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Example of all query endpoint options"',title:'"Example',of:!0,all:!0,query:!0,endpoint:!0,'options"':!0},"// Or from '@reduxjs/toolkit/query/react'\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nconst api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: '/',\n  }),\n  tagTypes: ['Post'],\n  endpoints: (build) => ({\n    // highlight-start\n    // The query accepts a number and returns a Post\n    getPost: build.query({\n      // note: an optional `queryFn` may be used in place of `query`\n      query: (id) => ({ url: `post/${id}` }),\n      // Pick out data and prevent nested properties in a hook or selector\n      transformResponse: (response, meta, arg) => response.data,\n      // Pick out errors and prevent nested properties in a hook or selector\n      transformErrorResponse: (response, meta, arg) => response.status,\n      providesTags: (result, error, id) => [{ type: 'Post', id }],\n      // The 2nd parameter is the destructured `QueryLifecycleApi`\n      async onQueryStarted(\n        arg,\n        {\n          dispatch,\n          getState,\n          extra,\n          requestId,\n          queryFulfilled,\n          getCacheEntry,\n          updateCachedData,\n        }\n      ) {},\n      // The 2nd parameter is the destructured `QueryCacheLifecycleApi`\n      async onCacheEntryAdded(\n        arg,\n        {\n          dispatch,\n          getState,\n          extra,\n          requestId,\n          cacheEntryRemoved,\n          cacheDataLoaded,\n          getCacheEntry,\n          updateCachedData,\n        }\n      ) {},\n      // highlight-end\n    }),\n  }),\n})\n")))),(0,i.kt)("h2",{id:"performing-queries-with-react-hooks"},"Performing Queries with React Hooks"),(0,i.kt)("p",null,"If you're using React Hooks, RTK Query does a few additional things for you. The primary benefit is that you get a render-optimized hook that allows you to have 'background fetching' as well as ",(0,i.kt)("a",{parentName:"p",href:"#frequently-used-query-hook-return-values"},"derived booleans")," for convenience."),(0,i.kt)("p",null,"Hooks are automatically generated based on the name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoint")," in the service definition. An endpoint field with ",(0,i.kt)("inlineCode",{parentName:"p"},"getPost: builder.query()")," will generate a hook named ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetPostQuery"),"."),(0,i.kt)("h3",{id:"hook-types"},"Hook types"),(0,i.kt)("p",null,"There are 5 query-related hooks:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/rtk-query/api/created-api/hooks#usequery"},(0,i.kt)("inlineCode",{parentName:"a"},"useQuery")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Composes ",(0,i.kt)("inlineCode",{parentName:"li"},"useQuerySubscription")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"useQueryState")," and is the primary hook. Automatically triggers fetches of data from an endpoint, 'subscribes' the component to the cached data, and reads the request status and cached data from the Redux store."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/rtk-query/api/created-api/hooks#usequerysubscription"},(0,i.kt)("inlineCode",{parentName:"a"},"useQuerySubscription")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"refetch")," function and accepts all hook options. Automatically triggers fetches of data from an endpoint, and 'subscribes' the component to the cached data."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/rtk-query/api/created-api/hooks#usequerystate"},(0,i.kt)("inlineCode",{parentName:"a"},"useQueryState")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns the query state and accepts ",(0,i.kt)("inlineCode",{parentName:"li"},"skip")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"selectFromResult"),". Reads the request status and cached data from the Redux store."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/rtk-query/api/created-api/hooks#uselazyquery"},(0,i.kt)("inlineCode",{parentName:"a"},"useLazyQuery")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns a tuple with a ",(0,i.kt)("inlineCode",{parentName:"li"},"trigger")," function, the query result, and last promise info. Similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"useQuery"),", but with manual control over when the data fetching occurs. ",(0,i.kt)("strong",{parentName:"li"},"Note: the ",(0,i.kt)("inlineCode",{parentName:"strong"},"trigger")," function takes a second argument of ",(0,i.kt)("inlineCode",{parentName:"strong"},"preferCacheValue?: boolean")," in the event you want to skip making a request if cached data already exists.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/rtk-query/api/created-api/hooks#uselazyquerysubscription"},(0,i.kt)("inlineCode",{parentName:"a"},"useLazyQuerySubscription")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns a tuple with a ",(0,i.kt)("inlineCode",{parentName:"li"},"trigger")," function, and last promise info. Similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"useQuerySubscription"),", but with manual control over when the data fetching occurs. ",(0,i.kt)("strong",{parentName:"li"},"Note: the ",(0,i.kt)("inlineCode",{parentName:"strong"},"trigger")," function takes a second argument of ",(0,i.kt)("inlineCode",{parentName:"strong"},"preferCacheValue?: boolean")," in the event you want to skip making a request if cached data already exists."))))),(0,i.kt)("p",null,"In practice, the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery"),"-based hooks such as ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetPostQuery")," will be the primary hooks used in your application, but the other hooks are available for specific use cases."),(0,i.kt)("h3",{id:"query-hook-options"},"Query Hook Options"),(0,i.kt)("p",null,"The query hooks expect two parameters: ",(0,i.kt)("inlineCode",{parentName:"p"},"(queryArg?, queryOptions?)"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"queryArg")," param will be passed through to the underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," callback to generate the URL."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"queryOptions")," object accepts several additional parameters that can be used to control the behavior of the data fetching:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./conditional-fetching"},"skip")," - Allows a query to 'skip' running for that render. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./polling"},"pollingInterval")," - Allows a query to automatically refetch on a provided interval, specified in milliseconds. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," ",(0,i.kt)("em",{parentName:"li"},"(off)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#selecting-data-from-a-query-result"},"selectFromResult")," - Allows altering the returned value of the hook to obtain a subset of the result, render-optimized for the returned subset."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../api/createApi#refetchonmountorargchange"},"refetchOnMountOrArgChange")," - Allows forcing the query to always refetch on mount (when ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," is provided). Allows forcing the query to refetch if enough time (in seconds) has passed since the last query for the same cache (when a ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," is provided). Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../api/createApi#refetchonfocus"},"refetchOnFocus")," - Allows forcing the query to refetch when the browser window regains focus. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../api/createApi#refetchonreconnect"},"refetchOnReconnect")," - Allows forcing the query to refetch when regaining a network connection. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"All ",(0,i.kt)("inlineCode",{parentName:"p"},"refetch"),"-related options will override the defaults you may have set in ",(0,i.kt)("a",{parentName:"p",href:"../api/createApi"},"createApi"))),(0,i.kt)("h3",{id:"frequently-used-query-hook-return-values"},"Frequently Used Query Hook Return Values"),(0,i.kt)("p",null,"The query hook returns an object containing properties such as the latest ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," for the query request, as well as status booleans for the current request lifecycle state. Below are some of the most frequently used properties. Refer to ",(0,i.kt)("a",{parentName:"p",href:"/rtk-query/api/created-api/hooks#usequery"},(0,i.kt)("inlineCode",{parentName:"a"},"useQuery"))," for an extensive list of all returned properties."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data")," - The latest returned result regardless of hook arg, if present."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currentData")," - The latest returned result for the current hook arg, if present."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error")," - The error result if present."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isUninitialized")," - When true, indicates that the query has not started yet."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isLoading")," - When true, indicates that the query is currently loading for the first time, and has no data yet. This will be ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," for the first request fired off, but ",(0,i.kt)("em",{parentName:"li"},"not")," for subsequent requests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isFetching")," - When true, indicates that the query is currently fetching, but might have data from an earlier request. This will be ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," for both the first request fired off, as well as subsequent requests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isSuccess")," - When true, indicates that the query has data from a successful request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isError")," - When true, indicates that the query is in an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refetch")," - A function to force refetch the query")),(0,i.kt)("p",null,"In most cases, you will probably read ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," and either ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"isFetching")," in order to render your UI."),(0,i.kt)("h3",{id:"query-hook-usage-example"},"Query Hook Usage Example"),(0,i.kt)("p",null,"Here is an example of a ",(0,i.kt)("inlineCode",{parentName:"p"},"PostDetail")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="Example"',"no-transpile":!0,title:'"Example"'},"export const PostDetail = ({ id }: { id: string }) => {\n  const {\n    data: post,\n    isFetching,\n    isLoading,\n  } = useGetPostQuery(id, {\n    pollingInterval: 3000,\n    refetchOnMountOrArgChange: true,\n    skip: false,\n  })\n\n  if (isLoading) return <div>Loading...</div>\n  if (!post) return <div>Missing post!</div>\n\n  return (\n    <div>\n      {post.name} {isFetching ? '...refetching' : ''}\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"The way that this component is setup would have some nice traits:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"It only shows 'Loading...' on the ",(0,i.kt)("strong",{parentName:"li"},"initial load"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Initial load")," is defined as a query that is pending and does not have data in the cache"))),(0,i.kt)("li",{parentName:"ol"},"When the request is re-triggered by the polling interval, it will add '...refetching' to the post name"),(0,i.kt)("li",{parentName:"ol"},"If a user closed this ",(0,i.kt)("inlineCode",{parentName:"li"},"PostDetail"),", but then re-opened it within ",(0,i.kt)("a",{parentName:"li",href:"../api/createApi#keepunuseddatafor"},"the allowed time"),", they would immediately be served a cached result and polling would resume with the previous behavior.")),(0,i.kt)("h3",{id:"query-loading-state"},"Query Loading State"),(0,i.kt)("p",null,"The auto-generated React hooks created by the React-specific version of ",(0,i.kt)("inlineCode",{parentName:"p"},"createApi")," provide ",(0,i.kt)("a",{parentName:"p",href:"#frequently-used-query-hook-return-values"},"derived booleans")," that reflect the current state of a given query. Derived booleans are preferred for the generated React hooks as opposed to a ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," flag, as the derived booleans are able to provide a greater amount of detail which would not be possible with a single ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," flag, as multiple statuses may be true at a given time (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"isFetching")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isSuccess"),")."),(0,i.kt)("p",null,"For query endpoints, RTK Query maintains a semantic distinction between ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isFetching")," in order to provide more flexibility with the derived information provided."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isLoading")," refers to a query being in flight for the ",(0,i.kt)("em",{parentName:"li"},"first time")," for the given hook. No data will be available at this time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isFetching")," refers to a query being in flight for the given endpoint + query param combination, but not necessarily for the first time. Data may be available from an earlier request done by this hook, maybe with the previous query param.")),(0,i.kt)("p",null,"This distinction allows for greater control when handling UI behavior. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," can be used to display a skeleton while loading for the first time, while ",(0,i.kt)("inlineCode",{parentName:"p"},"isFetching")," can be used to grey out old data when changing from page 1 to page 2 or when data is invalidated and re-fetched."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="Managing UI behavior with Query Loading States"',"no-transpile":!0,title:'"Managing',UI:!0,behavior:!0,with:!0,Query:!0,Loading:!0,'States"':!0},"import { Skeleton } from './Skeleton'\nimport { useGetPostsQuery } from './api'\n\nfunction App() {\n  const { data = [], isLoading, isFetching, isError } = useGetPostsQuery()\n\n  if (isError) return <div>An error has occurred!</div>\n\n  if (isLoading) return <Skeleton />\n\n  return (\n    <div className={isFetching ? 'posts--disabled' : ''}>\n      {data.map((post) => (\n        <Post\n          key={post.id}\n          id={post.id}\n          name={post.name}\n          disabled={isFetching}\n        />\n      ))}\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," is expected to be used in the majority of situations, ",(0,i.kt)("inlineCode",{parentName:"p"},"currentData")," is also provided,\nwhich allows for a further level of granularity. For example, if you wanted to show data in the UI\nas translucent to represent a re-fetching state, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," in combination with ",(0,i.kt)("inlineCode",{parentName:"p"},"isFetching"),"\nto achieve this. However, if you also wish to ",(0,i.kt)("em",{parentName:"p"},"only")," show data corresponding to the current arg,\nyou can instead use ",(0,i.kt)("inlineCode",{parentName:"p"},"currentData")," to achieve this."),(0,i.kt)("p",null,"In the example below, if posts are being fetched for the first time, a loading skeleton will be\nshown. If posts for the current user have previously been fetched, and are re-fetching (e.g. as a\nresult of a mutation), the UI will show the previous data, but will grey out the data. If the user\nchanges, it will instead show the skeleton again as opposed to greying out data for the previous user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="Managing UI behavior with currentData"',"no-transpile":!0,title:'"Managing',UI:!0,behavior:!0,with:!0,'currentData"':!0},"import { Skeleton } from './Skeleton'\nimport { useGetPostsByUserQuery } from './api'\n\nfunction PostsList({ userName }: { userName: string }) {\n  const { currentData, isFetching, isError } = useGetPostsByUserQuery(userName)\n\n  if (isError) return <div>An error has occurred!</div>\n\n  if (isFetching && !currentData) return <Skeleton />\n\n  return (\n    <div className={isFetching ? 'posts--disabled' : ''}>\n      {currentData\n        ? currentData.map((post) => (\n            <Post\n              key={post.id}\n              id={post.id}\n              name={post.name}\n              disabled={isFetching}\n            />\n          ))\n        : 'No data available'}\n    </div>\n  )\n}\n")),(0,i.kt)("h3",{id:"query-cache-keys"},"Query Cache Keys"),(0,i.kt)("p",null,"When you perform a query, RTK Query automatically serializes the request parameters and creates an internal ",(0,i.kt)("inlineCode",{parentName:"p"},"queryCacheKey")," for the request. Any future request that produces the same ",(0,i.kt)("inlineCode",{parentName:"p"},"queryCacheKey")," will be de-duped against the original, and will share updates if a ",(0,i.kt)("inlineCode",{parentName:"p"},"refetch")," is triggered on the query from any subscribed component."),(0,i.kt)("h3",{id:"selecting-data-from-a-query-result"},"Selecting data from a query result"),(0,i.kt)("p",null,"Sometimes you may have a parent component that is subscribed to a query, and then in a child component you want to pick an item from that query. In most cases you don't want to perform an additional request for a ",(0,i.kt)("inlineCode",{parentName:"p"},"getItemById"),"-type query when you know that you already have the result."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"selectFromResult")," allows you to get a specific segment from a query result in a performant manner. When using this feature, the component will not rerender unless the underlying data of the selected item has changed. If the selected item is one element in a larger collection, it will disregard changes to elements in the same collection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="Using selectFromResult to extract a single result"',"no-transpile":!0,title:'"Using',selectFromResult:!0,to:!0,extract:!0,a:!0,single:!0,'result"':!0},"function PostsList() {\n  const { data: posts } = api.useGetPostsQuery()\n\n  return (\n    <ul>\n      {posts?.data?.map((post) => <PostById key={post.id} id={post.id} />)}\n    </ul>\n  )\n}\n\nfunction PostById({ id }: { id: number }) {\n  // Will select the post with the given id, and will only rerender if the given post's data changes\n  const { post } = api.useGetPostsQuery(undefined, {\n    selectFromResult: ({ data }) => ({\n      post: data?.find((post) => post.id === id),\n    }),\n  })\n\n  return <li>{post?.name}</li>\n}\n")),(0,i.kt)("p",null,"Note that a shallow equality check is performed on the overall return value of ",(0,i.kt)("inlineCode",{parentName:"p"},"selectFromResult")," to determine whether to force a rerender. i.e. it will trigger a rerender if any of the returned object values change reference. If a new array/object is created and used as a return value within the callback, it will hinder the performance benefits due to being identified as a new item each time the callback is run. When intentionally providing an empty array/object, in order to avoid re-creating it each time the callback runs, you can declare an empty array/object outside of the component in order to maintain a stable reference."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'no-transpile title="Using selectFromResult with a stable empty array"',"no-transpile":!0,title:'"Using',selectFromResult:!0,with:!0,a:!0,stable:!0,empty:!0,'array"':!0},"// An array declared here will maintain a stable reference rather than be re-created again\nconst emptyArray: Post[] = []\n\nfunction PostsList() {\n  // This call will result in an initial render returning an empty array for `posts`,\n  // and a second render when the data is received.\n  // It will trigger additional rerenders only if the `posts` data changes\n  const { posts } = api.useGetPostsQuery(undefined, {\n    selectFromResult: ({ data }) => ({\n      posts: data ?? emptyArray,\n    }),\n  })\n\n  return (\n    <ul>\n      {posts.map((post) => (\n        <PostById key={post.id} id={post.id} />\n      ))}\n    </ul>\n  )\n}\n")),(0,i.kt)("p",null,"To summarize the above behaviour - the returned values must be correctly memoized. See also ",(0,i.kt)("a",{parentName:"p",href:"https://redux.js.org/usage/deriving-data-selectors"},"Deriving Data with Selectors")," and ",(0,i.kt)("a",{parentName:"p",href:"https://redux.js.org/tutorials/essentials/part-8-rtk-query-advanced#selecting-values-from-results"},"Redux Essentials - RTK Query Advanced Patterns")," for additional information."),(0,i.kt)("h3",{id:"avoiding-unnecessary-requests"},"Avoiding unnecessary requests"),(0,i.kt)("p",null,"By default, if you add a component that makes the same query as an existing one, no request will be performed."),(0,i.kt)("p",null,"In some cases, you may want to skip this behavior and force a refetch - in that case, you can call ",(0,i.kt)("inlineCode",{parentName:"p"},"refetch")," that is returned by the hook."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you're not using React Hooks, you can access ",(0,i.kt)("inlineCode",{parentName:"p"},"refetch")," like this:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"const { status, data, error, refetch } = dispatch(\n  pokemonApi.endpoints.getPokemon.initiate('bulbasaur'),\n)\n"))),(0,i.kt)("h2",{id:"example-observing-caching-behavior"},"Example: Observing caching behavior"),(0,i.kt)("p",null,"This example demonstrates request deduplication and caching behavior:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The first ",(0,i.kt)("inlineCode",{parentName:"li"},"Pokemon")," component mounts and immediately fetches 'bulbasaur'"),(0,i.kt)("li",{parentName:"ol"},"A second later, another ",(0,i.kt)("inlineCode",{parentName:"li"},"Pokemon")," component is rendered with 'bulbasaur'",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Notice that this one doesn't ever show 'Loading...' and no new network request happens? It's using the cache here."))),(0,i.kt)("li",{parentName:"ol"},"A moment after that, a ",(0,i.kt)("inlineCode",{parentName:"li"},"Pokemon")," component for 'pikachu' is added, and a new request happens."),(0,i.kt)("li",{parentName:"ol"},"When you click 'Refetch' for a specific ",(0,i.kt)("inlineCode",{parentName:"li"},"Pokemon"),", it'll update all instances of that ",(0,i.kt)("inlineCode",{parentName:"li"},"Pokemon")," with one request.")),(0,i.kt)("admonition",{title:"Try it out",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Click the 'Add bulbasaur' button. You'll observe the same behavior described above until you click the 'Refetch' button on one of the components.")),(0,i.kt)("iframe",{src:"https://codesandbox.io/embed/github/reduxjs/redux-toolkit/tree/master/examples/query/react/deduping-queries?fontsize=12&runonclick=1&hidenavigation=1&theme=dark",style:{width:"100%",height:"800px",border:0,borderRadius:"4px",overflow:"hidden"},title:"RTK Query - Basic query deduplication example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}))}f.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);