"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9422],{3411:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7378),i=n(7140),o="tabItem_wHwb";function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:n},t)}},2453:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(2685),i=n(7378),o=n(7140),r=n(362),l=n(56),s=n(5720),d=n(9169),p="tabList_J5MA",c="tabItem_l0OV";function u(e){var t,n,r=e.lazy,u=e.block,m=e.defaultValue,k=e.values,y=e.groupId,h=e.className,f=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=k?k:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,l.l)(b,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var S=null===m?m:null!=(t=null!=m?m:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:f[0].props.value;if(null!==S&&!b.some((function(e){return e.value===S})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+S+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),v=N.tabGroupChoices,C=N.setTabGroupChoices,w=(0,i.useState)(S),T=w[0],E=w[1],A=[],I=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var x=v[y];null!=x&&x!==T&&b.some((function(e){return e.value===x}))&&E(x)}var j=function(e){var t=e.currentTarget,n=A.indexOf(t),a=b[n].value;a!==T&&(I(t),E(a),null!=y&&C(y,String(a)))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,i=A.indexOf(e.currentTarget)+1;n=null!=(a=A[i])?a:A[0];break;case"ArrowLeft":var o,r=A.indexOf(e.currentTarget)-1;n=null!=(o=A[r])?o:A[A.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",p)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},h)},b.map((function(e){var t=e.value,n=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return A.push(e)},onKeyDown:O,onFocus:j,onClick:j},r,{className:(0,o.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),r?(0,i.cloneElement)(f.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,r.Z)();return i.createElement(u,(0,a.Z)({key:String(t)},e))}},3283:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return m}});var a=n(2685),i=n(1244),o=(n(7378),n(5318)),r=n(3411),l=n(2453),s=["components"],d={id:"createEntityAdapter",title:"createEntityAdapter",sidebar_label:"createEntityAdapter",hide_title:!0},p=void 0,c={unversionedId:"api/createEntityAdapter",id:"api/createEntityAdapter",title:"createEntityAdapter",description:"&nbsp;",source:"@site/../docs/api/createEntityAdapter.mdx",sourceDirName:"api",slug:"/api/createEntityAdapter",permalink:"/api/createEntityAdapter",draft:!1,tags:[],version:"current",lastUpdatedAt:1716193556,formattedLastUpdatedAt:"May 20, 2024",frontMatter:{id:"createEntityAdapter",title:"createEntityAdapter",sidebar_label:"createEntityAdapter",hide_title:!0},sidebar:"docs",previous:{title:"createAsyncThunk",permalink:"/api/createAsyncThunk"},next:{title:"combineSlices",permalink:"/api/combineSlices"}},u={},m=[{value:"Overview",id:"overview",level:2},{value:"Parameters",id:"parameters",level:2},{value:"<code>selectId</code>",id:"selectid",level:3},{value:"<code>sortComparer</code>",id:"sortcomparer",level:3},{value:"Return Value",id:"return-value",level:2},{value:"CRUD Functions",id:"crud-functions",level:3},{value:"<code>getInitialState</code>",id:"getinitialstate",level:3},{value:"Selector Functions",id:"selector-functions",level:3},{value:"Notes",id:"notes",level:2},{value:"Applying Multiple Updates",id:"applying-multiple-updates",level:3},{value:"Examples",id:"examples",level:2}],k={toc:m};function y(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"createentityadapter"},(0,o.kt)("inlineCode",{parentName:"h1"},"createEntityAdapter")),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"A function that generates a set of prebuilt reducers and selectors for performing CRUD operations on a ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape"},"normalized state structure")," containing instances of a particular type of data object. These reducer functions may be passed as case reducers to ",(0,o.kt)("inlineCode",{parentName:"p"},"createReducer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice"),'. They may also be used as "mutating" helper functions inside of ',(0,o.kt)("inlineCode",{parentName:"p"},"createReducer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice"),"."),(0,o.kt)("p",null,"This API was ported from ",(0,o.kt)("a",{parentName:"p",href:"https://ngrx.io/guide/entity"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"@ngrx/entity")," library")," created by the NgRx maintainers, but has been significantly modified for use with Redux Toolkit. We'd like to thank the NgRx team for originally creating this API and allowing us to port and adapt it for our needs."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},'The term "Entity" is used to refer to a unique type of data object in an application. For example, in a blogging application, you might have ',(0,o.kt)("inlineCode",{parentName:"p"},"User"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment")," data objects, with many instances of each being stored in the client and persisted on the server. ",(0,o.kt)("inlineCode",{parentName:"p"},"User"),' is an "entity" - a unique type of data object that the application uses. Each unique instance of an entity is assumed to have a unique ID value in a specific field.'),(0,o.kt)("p",{parentName:"admonition"},"As with all Redux logic, ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/style-guide/style-guide#do-not-put-non-serializable-values-in-state-or-actions"},(0,o.kt)("em",{parentName:"a"},"only")," plain JS objects and arrays should be passed in to the store - ",(0,o.kt)("strong",{parentName:"a"},"no class instances!"))),(0,o.kt)("p",{parentName:"admonition"},"For purposes of this reference, we will use ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," to refer to the specific data type that is being managed by a copy of the reducer logic in a specific portion of the Redux state tree, and ",(0,o.kt)("inlineCode",{parentName:"p"},"entity")," to refer to a single instance of that type. Example: in ",(0,o.kt)("inlineCode",{parentName:"p"},"state.users"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," would refer to the ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," type, and ",(0,o.kt)("inlineCode",{parentName:"p"},"state.users.entities[123]")," would be a single ",(0,o.kt)("inlineCode",{parentName:"p"},"entity"),".")),(0,o.kt)("p",null,"The methods generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"createEntityAdapter"),' will all manipulate an "entity state" structure that looks like:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  // The unique IDs of each item. Must be strings or numbers\n  ids: []\n  // A lookup table mapping entity IDs to the corresponding entity objects\n  entities: {\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createEntityAdapter")," may be called multiple times in an application. If you are using it with plain JavaScript, you may be able to reuse a single adapter definition with multiple entity types if they're similar enough (such as all having an ",(0,o.kt)("inlineCode",{parentName:"p"},"entity.id")," field). For ",(0,o.kt)("a",{parentName:"p",href:"/usage/usage-with-typescript#createentityadapter"},"TypeScript usage"),", you will need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"createEntityAdapter")," a separate time for each distinct ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," type, so that the type definitions are inferred correctly."),(0,o.kt)("p",null,"Sample usage:"),(0,o.kt)(l.Z,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  createEntityAdapter,\n  createSlice,\n  configureStore,\n} from '@reduxjs/toolkit'\n\ntype Book = { bookId: string; title: string }\n\nconst booksAdapter = createEntityAdapter({\n  // Assume IDs are stored in a field other than `book.id`\n  selectId: (book: Book) => book.bookId,\n  // Keep the \"all IDs\" array sorted based on book titles\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(),\n  reducers: {\n    // Can pass adapter functions directly as case reducers.  Because we're passing this\n    // as a value, `createSlice` will auto-generate the `bookAdded` action type / creator\n    bookAdded: booksAdapter.addOne,\n    booksReceived(state, action) {\n      // Or, call them as \"mutating\" helpers in a case reducer\n      booksAdapter.setAll(state, action.payload.books)\n    },\n  },\n})\n\nconst store = configureStore({\n  reducer: {\n    books: booksSlice.reducer,\n  },\n})\n\ntype RootState = ReturnType<typeof store.getState>\n\nconsole.log(store.getState().books)\n// { ids: [], entities: {} }\n\n// Can create a set of memoized selectors based on the location of this entity state\nconst booksSelectors = booksAdapter.getSelectors<RootState>(\n  (state) => state.books\n)\n\n// And then use the selectors to retrieve values\nconst allBooks = booksSelectors.selectAll(store.getState())\n"))),(0,o.kt)(r.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  createEntityAdapter,\n  createSlice,\n  configureStore,\n} from '@reduxjs/toolkit'\n\nconst booksAdapter = createEntityAdapter({\n  // Assume IDs are stored in a field other than `book.id`\n  selectId: (book) => book.bookId,\n  // Keep the \"all IDs\" array sorted based on book titles\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(),\n  reducers: {\n    // Can pass adapter functions directly as case reducers.  Because we're passing this\n    // as a value, `createSlice` will auto-generate the `bookAdded` action type / creator\n    bookAdded: booksAdapter.addOne,\n    booksReceived(state, action) {\n      // Or, call them as \"mutating\" helpers in a case reducer\n      booksAdapter.setAll(state, action.payload.books)\n    },\n  },\n})\n\nconst store = configureStore({\n  reducer: {\n    books: booksSlice.reducer,\n  },\n})\n\nconsole.log(store.getState().books)\n// { ids: [], entities: {} }\n\n// Can create a set of memoized selectors based on the location of this entity state\nconst booksSelectors = booksAdapter.getSelectors((state) => state.books)\n\n// And then use the selectors to retrieve values\nconst allBooks = booksSelectors.selectAll(store.getState())\n")))),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createEntityAdapter")," accepts a single options object parameter, with two optional fields inside."),(0,o.kt)("h3",{id:"selectid"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectId")),(0,o.kt)("p",null,"A function that accepts a single ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," instance, and returns the value of whatever unique ID field is inside. If not provided, the default implementation is ",(0,o.kt)("inlineCode",{parentName:"p"},"entity => entity.id"),". If your ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," type keeps its unique ID values in a field other than ",(0,o.kt)("inlineCode",{parentName:"p"},"entity.id"),", you ",(0,o.kt)("strong",{parentName:"p"},"must")," provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"selectId")," function."),(0,o.kt)("h3",{id:"sortcomparer"},(0,o.kt)("inlineCode",{parentName:"h3"},"sortComparer")),(0,o.kt)("p",null,"A callback function that accepts two ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," instances, and should return a standard ",(0,o.kt)("inlineCode",{parentName:"p"},"Array.sort()")," numeric result (1, 0, -1) to indicate their relative order for sorting."),(0,o.kt)("p",null,"If provided, the ",(0,o.kt)("inlineCode",{parentName:"p"},"state.ids")," array will be kept in sorted order based on comparisons of the entity objects, so that mapping over the IDs array to retrieve entities by ID should result in a sorted array of entities."),(0,o.kt)("p",null,"If not provided, the ",(0,o.kt)("inlineCode",{parentName:"p"},"state.ids")," array will not be sorted, and no guarantees are made about the ordering. In other words, ",(0,o.kt)("inlineCode",{parentName:"p"},"state.ids")," can be expected to behave like a standard Javascript array."),(0,o.kt)("p",null,"Note that sorting only kicks in when state is changed via one of the CRUD functions below (for example, ",(0,o.kt)("inlineCode",{parentName:"p"},"addOne()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"updateMany()"),")."),(0,o.kt)("h2",{id:"return-value"},"Return Value"),(0,o.kt)("p",null,'A "entity adapter" instance. An entity adapter is a plain JS object (not a class) containing the generated reducer functions, the original provided ',(0,o.kt)("inlineCode",{parentName:"p"},"selectId")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sortComparer"),' callbacks, a method to generate an initial "entity state" value, and functions to generate a set of globalized and non-globalized memoized selector functions for this entity type.'),(0,o.kt)("p",null,"The adapter instance will include the following methods (additional referenced TypeScript types included):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"export type EntityId = number | string\n\nexport type Comparer<T> = (a: T, b: T) => number\n\nexport type IdSelector<T> = (model: T) => EntityId\n\nexport type Update<T> = { id: EntityId; changes: Partial<T> }\n\nexport interface EntityState<T> {\n  ids: EntityId[]\n  entities: Record<EntityId, T>\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>\n  sortComparer: false | Comparer<T>\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(state: S, entity: T): S\n  addOne<S extends EntityState<T>>(state: S, action: PayloadAction<T>): S\n\n  addMany<S extends EntityState<T>>(state: S, entities: T[]): S\n  addMany<S extends EntityState<T>>(state: S, entities: PayloadAction<T[]>): S\n\n  setOne<S extends EntityState<T>>(state: S, entity: T): S\n  setOne<S extends EntityState<T>>(state: S, action: PayloadAction<T>): S\n\n  setMany<S extends EntityState<T>>(state: S, entities: T[]): S\n  setMany<S extends EntityState<T>>(state: S, entities: PayloadAction<T[]>): S\n\n  setAll<S extends EntityState<T>>(state: S, entities: T[]): S\n  setAll<S extends EntityState<T>>(state: S, entities: PayloadAction<T[]>): S\n\n  removeOne<S extends EntityState<T>>(state: S, key: EntityId): S\n  removeOne<S extends EntityState<T>>(state: S, key: PayloadAction<EntityId>): S\n\n  removeMany<S extends EntityState<T>>(state: S, keys: EntityId[]): S\n  removeMany<S extends EntityState<T>>(\n    state: S,\n    keys: PayloadAction<EntityId[]>,\n  ): S\n\n  removeAll<S extends EntityState<T>>(state: S): S\n\n  updateOne<S extends EntityState<T>>(state: S, update: Update<T>): S\n  updateOne<S extends EntityState<T>>(\n    state: S,\n    update: PayloadAction<Update<T>>,\n  ): S\n\n  updateMany<S extends EntityState<T>>(state: S, updates: Update<T>[]): S\n  updateMany<S extends EntityState<T>>(\n    state: S,\n    updates: PayloadAction<Update<T>[]>,\n  ): S\n\n  upsertOne<S extends EntityState<T>>(state: S, entity: T): S\n  upsertOne<S extends EntityState<T>>(state: S, entity: PayloadAction<T>): S\n\n  upsertMany<S extends EntityState<T>>(state: S, entities: T[]): S\n  upsertMany<S extends EntityState<T>>(\n    state: S,\n    entities: PayloadAction<T[]>,\n  ): S\n}\n\nexport interface EntitySelectors<T, V> {\n  selectIds: (state: V) => EntityId[]\n  selectEntities: (state: V) => Record<EntityId, T>\n  selectAll: (state: V) => T[]\n  selectTotal: (state: V) => number\n  selectById: (state: V, id: EntityId) => T | undefined\n}\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>\n  sortComparer: false | Comparer<T>\n  getInitialState(): EntityState<T>\n  getInitialState<S extends object>(state: S): EntityState<T> & S\n  getSelectors(): EntitySelectors<T, EntityState<T>>\n  getSelectors<V>(\n    selectState: (state: V) => EntityState<T>,\n  ): EntitySelectors<T, V>\n}\n")),(0,o.kt)("h3",{id:"crud-functions"},"CRUD Functions"),(0,o.kt)("p",null,"The primary content of an entity adapter is a set of generated reducer functions for adding, updating, and removing entity instances from an entity state object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"addOne"),": accepts a single entity, and adds it if it's not already present."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"addMany"),": accepts an array of entities or an object in the shape of ",(0,o.kt)("inlineCode",{parentName:"li"},"Record<EntityId, T>"),", and adds them if not already present."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setOne"),": accepts a single entity and adds or replaces it"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setMany"),": accepts an array of entities or an object in the shape of ",(0,o.kt)("inlineCode",{parentName:"li"},"Record<EntityId, T>"),", and adds or replaces them."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setAll"),": accepts an array of entities or an object in the shape of ",(0,o.kt)("inlineCode",{parentName:"li"},"Record<EntityId, T>"),", and replaces all existing entities with the values in the array."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"removeOne"),": accepts a single entity ID value, and removes the entity with that ID if it exists."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"removeMany"),": accepts an array of entity ID values, and removes each entity with those IDs if they exist."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"removeAll"),": removes all entities from the entity state object."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"updateOne"),': accepts an "update object" containing an entity ID and an object containing one or more new field values to update inside a ',(0,o.kt)("inlineCode",{parentName:"li"},"changes")," field, and performs a shallow update on the corresponding entity."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"updateMany"),": accepts an array of update objects, and performs shallow updates on all corresponding entities."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"upsertOne"),": accepts a single entity. If an entity with that ID exists, it will perform a shallow update and the specified fields will be merged into the existing entity, with any matching fields overwriting the existing values. If the entity does not exist, it will be added."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"upsertMany"),": accepts an array of entities or an object in the shape of ",(0,o.kt)("inlineCode",{parentName:"li"},"Record<EntityId, T>")," that will be shallowly upserted.")),(0,o.kt)("admonition",{title:"Should I add, set or upsert my entity?",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"All three options will insert ",(0,o.kt)("em",{parentName:"p"},"new")," entities into the list. However they differ in how they handle entities that already exist. If an entity ",(0,o.kt)("strong",{parentName:"p"},"already exists"),":"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"addOne")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"addMany")," will do nothing with the new entity"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setOne")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"setMany")," will completely replace the old entity with the new one. This will also get rid of any properties on the entity that are not present in the new version of said entity."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"upsertOne")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"upsertMany")," will do a shallow copy to merge the old and new entities overwriting existing values, adding any that were not there and not touching properties not provided in the new entity."))),(0,o.kt)("p",null,"Each method has a signature that looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},";(state: EntityState<T>, argument: TypeOrPayloadAction<Argument<T>>) =>\n  EntityState<T>\n")),(0,o.kt)("p",null,"In other words, they accept a state that looks like ",(0,o.kt)("inlineCode",{parentName:"p"},"{ids: [], entities: {}}"),", and calculate and return a new state."),(0,o.kt)("p",null,"These CRUD methods may be used in multiple ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"They may be passed as case reducers directly to ",(0,o.kt)("inlineCode",{parentName:"li"},"createReducer")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"createSlice"),"."),(0,o.kt)("li",{parentName:"ul"},'They may be used as "mutating" helper methods when called manually, such as a separate hand-written call to ',(0,o.kt)("inlineCode",{parentName:"li"},"addOne()")," inside of an existing case reducer, if the ",(0,o.kt)("inlineCode",{parentName:"li"},"state")," argument is actually an Immer ",(0,o.kt)("inlineCode",{parentName:"li"},"Draft")," value."),(0,o.kt)("li",{parentName:"ul"},"They may be used as immutable update methods when called manually, if the ",(0,o.kt)("inlineCode",{parentName:"li"},"state")," argument is actually a plain JS object or array.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"These methods do ",(0,o.kt)("em",{parentName:"p"},"not")," have corresponding Redux actions created - they are just standalone reducers / update logic. ",(0,o.kt)("strong",{parentName:"p"},"It is entirely up to you to decide where and how to use these methods!")," Most of the time, you will want to pass them to ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice")," or use them inside another reducer.")),(0,o.kt)("p",null,"Each method will check to see if the ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," argument is an Immer ",(0,o.kt)("inlineCode",{parentName:"p"},"Draft")," or not. If it is a draft, the method will assume that it's safe to continue mutating that draft further. If it is not a draft, the method will pass the plain JS value to Immer's ",(0,o.kt)("inlineCode",{parentName:"p"},"createNextState()"),", and return the immutably updated result value."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"argument")," may be either a plain value (such as a single ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," object for ",(0,o.kt)("inlineCode",{parentName:"p"},"addOne()")," or an ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity[]")," array for ",(0,o.kt)("inlineCode",{parentName:"p"},"addMany()"),", or a ",(0,o.kt)("inlineCode",{parentName:"p"},"PayloadAction")," action object with that same value as ",(0,o.kt)("inlineCode",{parentName:"p"},"action.payload"),". This enables using them as both helper functions and reducers."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note on shallow updates:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"updateOne"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"updateMany"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"upsertOne"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"upsertMany")," only perform shallow updates in a mutable manner. This means that if your update/upsert consists of an object that includes nested properties, the value of the incoming change will overwrite the ",(0,o.kt)("strong",{parentName:"p"},"entire")," existing nested object. This may be unintended behavior for your application. As a general rule, these methods are best used with ",(0,o.kt)("a",{parentName:"p",href:"/usage/usage-guide#managing-normalized-data"},"normalized data")," that ",(0,o.kt)("em",{parentName:"p"},"do not")," have nested properties.")),(0,o.kt)("h3",{id:"getinitialstate"},(0,o.kt)("inlineCode",{parentName:"h3"},"getInitialState")),(0,o.kt)("p",null,"Returns a new entity state object like ",(0,o.kt)("inlineCode",{parentName:"p"},"{ids: [], entities: {}}"),"."),(0,o.kt)("p",null,"It accepts an optional object as an argument. The fields in that object will be merged into the returned initial state value. For example, perhaps you want your slice to also track some loading state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState({\n    loading: 'idle',\n  }),\n  reducers: {\n    booksLoadingStarted(state, action) {\n      // Can update the additional state field\n      state.loading = 'pending'\n    },\n  },\n})\n")),(0,o.kt)("p",null,"You can also pass in an array of entities or a ",(0,o.kt)("inlineCode",{parentName:"p"},"Record<EntityId, T>")," object to pre-populate the initial state with some entities:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(\n    {\n      loading: 'idle',\n    },\n    [\n      { id: 'a', title: 'First' },\n      { id: 'b', title: 'Second' },\n    ],\n  ),\n  reducers: {},\n})\n")),(0,o.kt)("p",null,"This is equivalent to calling:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const initialState = booksAdapter.getInitialState({\n  loading: 'idle',\n})\n\nconst prePopulatedState = booksAdapter.setAll(initialState, [\n  { id: 'a', title: 'First' },\n  { id: 'b', title: 'Second' },\n])\n")),(0,o.kt)("p",null,"The first parameter can be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if no additional properties are needed."),(0,o.kt)("h3",{id:"selector-functions"},"Selector Functions"),(0,o.kt)("p",null,"The entity adapter will contain a ",(0,o.kt)("inlineCode",{parentName:"p"},"getSelectors()")," function that returns a set of selectors that know how to read the contents of an entity state object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selectIds"),": returns the ",(0,o.kt)("inlineCode",{parentName:"li"},"state.ids")," array."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selectEntities"),": returns the ",(0,o.kt)("inlineCode",{parentName:"li"},"state.entities")," lookup table."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selectAll"),": maps over the ",(0,o.kt)("inlineCode",{parentName:"li"},"state.ids")," array, and returns an array of entities in the same order."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selectTotal"),": returns the total number of entities being stored in this state."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"selectById"),": given the state and an entity ID, returns the entity with that ID or ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,o.kt)("p",null,"Each selector function will be created using the ",(0,o.kt)("inlineCode",{parentName:"p"},"createSelector")," function from Reselect, to enable memoizing calculation of the results."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"createSelector")," instance used can be replaced, by passing it as part of the options object (second parameter):"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  createDraftSafeSelectorCreator,\n  weakMapMemoize,\n} from '@reduxjs/toolkit'\n\nconst createWeakMapDraftSafeSelector =\n  createDraftSafeSelectorCreator(weakMapMemoize)\n\nconst simpleSelectors = booksAdapter.getSelectors(undefined, {\n  createSelector: createWeakMapDraftSafeSelector,\n})\n\nconst globalizedSelectors = booksAdapter.getSelectors((state) => state.books, {\n  createSelector: createWeakMapDraftSafeSelector,\n})\n")),(0,o.kt)("p",{parentName:"admonition"},"If no instance is passed, it will default to ",(0,o.kt)("a",{parentName:"p",href:"./createSelector#createDraftSafeSelector"},(0,o.kt)("inlineCode",{parentName:"a"},"createDraftSafeSelector")),".")),(0,o.kt)("p",null,"Because selector functions are dependent on knowing where in the state tree this specific entity state object is kept, ",(0,o.kt)("inlineCode",{parentName:"p"},"getSelectors()")," can be called in two ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'If called without any arguments (or with undefined as the first parameter), it returns an "unglobalized" set of selector functions that assume their ',(0,o.kt)("inlineCode",{parentName:"li"},"state")," argument is the actual entity state object to read from."),(0,o.kt)("li",{parentName:"ul"},"It may also be called with a selector function that accepts the entire Redux state tree and returns the correct entity state object.")),(0,o.kt)("p",null,"For example, the entity state for a ",(0,o.kt)("inlineCode",{parentName:"p"},"Book")," type might be kept in the Redux state tree as ",(0,o.kt)("inlineCode",{parentName:"p"},"state.books"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getSelectors()")," to read from that state in two ways:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const store = configureStore({\n  reducer: {\n    books: booksReducer,\n  },\n})\n\nconst simpleSelectors = booksAdapter.getSelectors()\nconst globalizedSelectors = booksAdapter.getSelectors((state) => state.books)\n\n// Need to manually pass the correct entity state object in to this selector\nconst bookIds = simpleSelectors.selectIds(store.getState().books)\n\n// This selector already knows how to find the books entity state\nconst allBooks = globalizedSelectors.selectAll(store.getState())\n")),(0,o.kt)("h2",{id:"notes"},"Notes"),(0,o.kt)("h3",{id:"applying-multiple-updates"},"Applying Multiple Updates"),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"updateMany()")," is called with multiple updates targeted to the same ID, they will be merged into a single update, with later updates overwriting the earlier ones."),(0,o.kt)("p",null,"For both ",(0,o.kt)("inlineCode",{parentName:"p"},"updateOne()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"updateMany()"),", changing the ID of one existing entity to match the ID of a second existing entity will cause the first to replace the second completely."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Exercising several of the CRUD methods and selectors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  createEntityAdapter,\n  createSlice,\n  configureStore,\n} from '@reduxjs/toolkit'\n\n// Since we don't provide `selectId`, it defaults to assuming `entity.id` is the right field\nconst booksAdapter = createEntityAdapter({\n  // Keep the \"all IDs\" array sorted based on book titles\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState({\n    loading: 'idle',\n  }),\n  reducers: {\n    // Can pass adapter functions directly as case reducers.  Because we're passing this\n    // as a value, `createSlice` will auto-generate the `bookAdded` action type / creator\n    bookAdded: booksAdapter.addOne,\n    booksLoading(state, action) {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    booksReceived(state, action) {\n      if (state.loading === 'pending') {\n        // Or, call them as \"mutating\" helpers in a case reducer\n        booksAdapter.setAll(state, action.payload)\n        state.loading = 'idle'\n      }\n    },\n    bookUpdated: booksAdapter.updateOne,\n  },\n})\n\nconst { bookAdded, booksLoading, booksReceived, bookUpdated } =\n  booksSlice.actions\n\nconst store = configureStore({\n  reducer: {\n    books: booksSlice.reducer,\n  },\n})\n\n// Check the initial state:\nconsole.log(store.getState().books)\n// {ids: [], entities: {}, loading: 'idle' }\n\nconst booksSelectors = booksAdapter.getSelectors((state) => state.books)\n\nstore.dispatch(bookAdded({ id: 'a', title: 'First' }))\nconsole.log(store.getState().books)\n// {ids: [\"a\"], entities: {a: {id: \"a\", title: \"First\"}}, loading: 'idle' }\n\nstore.dispatch(bookUpdated({ id: 'a', changes: { title: 'First (altered)' } }))\nstore.dispatch(booksLoading())\nconsole.log(store.getState().books)\n// {ids: [\"a\"], entities: {a: {id: \"a\", title: \"First (altered)\"}}, loading: 'pending' }\n\nstore.dispatch(\n  booksReceived([\n    { id: 'b', title: 'Book 3' },\n    { id: 'c', title: 'Book 2' },\n  ]),\n)\n\nconsole.log(booksSelectors.selectIds(store.getState()))\n// \"a\" was removed due to the `setAll()` call\n// Since they're sorted by title, \"Book 2\" comes before \"Book 3\"\n// [\"c\", \"b\"]\n\nconsole.log(booksSelectors.selectAll(store.getState()))\n// All book entries in sorted order\n// [{id: \"c\", title: \"Book 2\"}, {id: \"b\", title: \"Book 3\"}]\n")))}y.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);